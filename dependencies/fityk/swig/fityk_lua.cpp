/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGLUA
#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the the location of the innermost Lua call-point
   (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the the
   location of the innermost Lua call-point (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        } 
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member) 
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else 
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;
  
fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);
      
}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  const char *className;
  void* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = lua_touserdata(L,1); /* get the userdata address for later */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  lua_getfield(L, -1, ".type");
  className = lua_tostring(L, -1);

  lua_pushfstring(L, "<%s userdata: %p>", className, userData);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  
  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all it's bases(recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metatmethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows to skip searching metamethod in givel clss and immideatelly go to searching in bases. skip_check
 * is not caried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */
  
  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);
  
  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));
  
  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1); 

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index); 

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);
      
      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success; 
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metatmethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_fityk__ExitRequestedException swig_types[0]
#define SWIGTYPE_p_double swig_types[1]
#define SWIGTYPE_p_fityk__ExecuteError swig_types[2]
#define SWIGTYPE_p_fityk__ExitRequestedException swig_types[3]
#define SWIGTYPE_p_fityk__Fityk swig_types[4]
#define SWIGTYPE_p_fityk__Full swig_types[5]
#define SWIGTYPE_p_fityk__Func swig_types[6]
#define SWIGTYPE_p_fityk__Point swig_types[7]
#define SWIGTYPE_p_fityk__RealRange swig_types[8]
#define SWIGTYPE_p_fityk__SyntaxError swig_types[9]
#define SWIGTYPE_p_fityk__Var swig_types[10]
#define SWIGTYPE_p_std__FILE swig_types[11]
#define SWIGTYPE_p_std__exception swig_types[12]
#define SWIGTYPE_p_std__invalid_argument swig_types[13]
#define SWIGTYPE_p_std__runtime_error swig_types[14]
#define SWIGTYPE_p_std__string swig_types[15]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[16]
#define SWIGTYPE_p_std__vectorT_fityk__Func_p_t swig_types[17]
#define SWIGTYPE_p_std__vectorT_fityk__Point_t swig_types[18]
#define SWIGTYPE_p_std__vectorT_fityk__Var_p_t swig_types[19]
#define SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t swig_types[20]
static swig_type_info *swig_types[22];
static swig_module_info swig_module = {swig_types, 21, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "fityk"
#define SWIG_init      luaopen_fityk
#define SWIG_init_user luaopen_fityk_user

#define SWIG_LUACODE   luaopen_fityk_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


// suppress a number of clang warnings from SWIG-generated code
#ifdef __clang__
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#pragma clang diagnostic ignored "-Wmissing-variable-declarations"
#pragma clang diagnostic ignored "-Wunreachable-code"
#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wshadow"
#pragma clang diagnostic ignored "-Wc++98-compat-pedantic"
#pragma clang diagnostic ignored "-Wconditional-uninitialized"
#endif


#define BUILDING_LIBFITYK
#include "fityk.h"


#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <vector>


#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <stdexcept>

SWIGINTERN fityk::Point std_vector_Sl_fityk_Point_Sg____getitem__(std::vector< fityk::Point > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_fityk_Point_Sg____setitem__(std::vector< fityk::Point > *self,unsigned int idx,fityk::Point val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN int std_vector_Sl_fityk_Point_Sg____len(std::vector< fityk::Point > *self,void *){ return self->size(); }
SWIGINTERN double std_vector_Sl_double_Sg____getitem__(std::vector< double > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_double_Sg____setitem__(std::vector< double > *self,unsigned int idx,double val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN int std_vector_Sl_double_Sg____len(std::vector< double > *self,void *){ return self->size(); }
SWIGINTERN fityk::Var *std_vector_Sl_fityk_Var_Sm__Sg____getitem__(std::vector< fityk::Var * > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_fityk_Var_Sm__Sg____setitem__(std::vector< fityk::Var * > *self,unsigned int idx,fityk::Var *val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN int std_vector_Sl_fityk_Var_Sm__Sg____len(std::vector< fityk::Var * > *self,void *){ return self->size(); }
SWIGINTERN fityk::Func *std_vector_Sl_fityk_Func_Sm__Sg____getitem__(std::vector< fityk::Func * > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_fityk_Func_Sm__Sg____setitem__(std::vector< fityk::Func * > *self,unsigned int idx,fityk::Func *val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN int std_vector_Sl_fityk_Func_Sm__Sg____len(std::vector< fityk::Func * > *self,void *){ return self->size(); }
SWIGINTERN std::string fityk_Var___str__(fityk::Var *self){ return "<Var $" + self->name + ">"; }
SWIGINTERN std::string fityk_Func___str__(fityk::Func *self){ return "<Func %"+self->name + ">"; }
SWIGINTERN std::string fityk_Point___str__(fityk::Point *self){ return self->str(); }
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("std::string::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static int _proxy__wrap_new_string(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_string);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_string_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_string_methods[]= {
    { "size", _wrap_string_size},
    { "length", _wrap_string_length},
    { "empty", _wrap_string_empty},
    { "c_str", _wrap_string_c_str},
    { "data", _wrap_string_data},
    { "assign", _wrap_string_assign},
    {0,0}
};
static swig_lua_method swig_string_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_string_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_string_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_string_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_string_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_string_Sf_SwigStatic = {
    "string",
    swig_string_Sf_SwigStatic_methods,
    swig_string_Sf_SwigStatic_attributes,
    swig_string_Sf_SwigStatic_constants,
    swig_string_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_string_bases[] = {0};
static const char *swig_string_base_names[] = {0};
static swig_lua_class _wrap_class_string = { "string", "string", &SWIGTYPE_p_std__string,_proxy__wrap_new_string, swig_delete_string, swig_string_methods, swig_string_attributes, &swig_string_Sf_SwigStatic, swig_string_meta, swig_string_bases, swig_string_base_names };

static int _wrap_new_PointVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Point > *result = 0 ;
  
  SWIG_check_num_args("std::vector< fityk::Point >::vector",0,0)
  result = (std::vector< fityk::Point > *)new std::vector< fityk::Point >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_fityk__Point_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PointVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< fityk::Point > *result = 0 ;
  
  SWIG_check_num_args("std::vector< fityk::Point >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< fityk::Point >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< fityk::Point > *)new std::vector< fityk::Point >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_fityk__Point_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PointVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Point > *arg1 = 0 ;
  std::vector< fityk::Point > *result = 0 ;
  
  SWIG_check_num_args("std::vector< fityk::Point >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< fityk::Point >::vector",1,"std::vector< fityk::Point > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Point_t,0))){
    SWIG_fail_ptr("new_PointVector",1,SWIGTYPE_p_std__vectorT_fityk__Point_t);
  }
  
  result = (std::vector< fityk::Point > *)new std::vector< fityk::Point >((std::vector< fityk::Point > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_fityk__Point_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PointVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  fityk::Point arg2 ;
  fityk::Point *argp2 ;
  std::vector< fityk::Point > *result = 0 ;
  
  SWIG_check_num_args("std::vector< fityk::Point >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< fityk::Point >::vector",1,"unsigned int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< fityk::Point >::vector",2,"fityk::Point");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_fityk__Point,0))){
    SWIG_fail_ptr("new_PointVector",2,SWIGTYPE_p_fityk__Point);
  }
  arg2 = *argp2;
  
  result = (std::vector< fityk::Point > *)new std::vector< fityk::Point >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_fityk__Point_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PointVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PointVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_fityk__Point_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PointVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_PointVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_fityk__Point, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_PointVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PointVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< fityk::Point >::vector()\n"
    "    std::vector< fityk::Point >::vector(unsigned int)\n"
    "    std::vector< fityk::Point >::vector(std::vector< fityk::Point > const &)\n"
    "    std::vector< fityk::Point >::vector(unsigned int,fityk::Point)\n");
  lua_error(L);return 0;
}


static int _wrap_PointVector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Point > *arg1 = (std::vector< fityk::Point > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< fityk::Point >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Point >::size",1,"std::vector< fityk::Point > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Point_t,0))){
    SWIG_fail_ptr("PointVector_size",1,SWIGTYPE_p_std__vectorT_fityk__Point_t);
  }
  
  result = (unsigned int)((std::vector< fityk::Point > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PointVector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Point > *arg1 = (std::vector< fityk::Point > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< fityk::Point >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Point >::max_size",1,"std::vector< fityk::Point > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Point_t,0))){
    SWIG_fail_ptr("PointVector_max_size",1,SWIGTYPE_p_std__vectorT_fityk__Point_t);
  }
  
  result = (unsigned int)((std::vector< fityk::Point > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PointVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Point > *arg1 = (std::vector< fityk::Point > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< fityk::Point >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Point >::empty",1,"std::vector< fityk::Point > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Point_t,0))){
    SWIG_fail_ptr("PointVector_empty",1,SWIGTYPE_p_std__vectorT_fityk__Point_t);
  }
  
  result = (bool)((std::vector< fityk::Point > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PointVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Point > *arg1 = (std::vector< fityk::Point > *) 0 ;
  
  SWIG_check_num_args("std::vector< fityk::Point >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Point >::clear",1,"std::vector< fityk::Point > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Point_t,0))){
    SWIG_fail_ptr("PointVector_clear",1,SWIGTYPE_p_std__vectorT_fityk__Point_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PointVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Point > *arg1 = (std::vector< fityk::Point > *) 0 ;
  fityk::Point arg2 ;
  fityk::Point *argp2 ;
  
  SWIG_check_num_args("std::vector< fityk::Point >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Point >::push_back",1,"std::vector< fityk::Point > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< fityk::Point >::push_back",2,"fityk::Point");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Point_t,0))){
    SWIG_fail_ptr("PointVector_push_back",1,SWIGTYPE_p_std__vectorT_fityk__Point_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_fityk__Point,0))){
    SWIG_fail_ptr("PointVector_push_back",2,SWIGTYPE_p_fityk__Point);
  }
  arg2 = *argp2;
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PointVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Point > *arg1 = (std::vector< fityk::Point > *) 0 ;
  
  SWIG_check_num_args("std::vector< fityk::Point >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Point >::pop_back",1,"std::vector< fityk::Point > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Point_t,0))){
    SWIG_fail_ptr("PointVector_pop_back",1,SWIGTYPE_p_std__vectorT_fityk__Point_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PointVector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Point > *arg1 = (std::vector< fityk::Point > *) 0 ;
  fityk::Point result;
  
  SWIG_check_num_args("std::vector< fityk::Point >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Point >::front",1,"std::vector< fityk::Point > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Point_t,0))){
    SWIG_fail_ptr("PointVector_front",1,SWIGTYPE_p_std__vectorT_fityk__Point_t);
  }
  
  result = ((std::vector< fityk::Point > const *)arg1)->front();
  {
    fityk::Point * resultptr = new fityk::Point((const fityk::Point &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_fityk__Point,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PointVector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Point > *arg1 = (std::vector< fityk::Point > *) 0 ;
  fityk::Point result;
  
  SWIG_check_num_args("std::vector< fityk::Point >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Point >::back",1,"std::vector< fityk::Point > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Point_t,0))){
    SWIG_fail_ptr("PointVector_back",1,SWIGTYPE_p_std__vectorT_fityk__Point_t);
  }
  
  result = ((std::vector< fityk::Point > const *)arg1)->back();
  {
    fityk::Point * resultptr = new fityk::Point((const fityk::Point &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_fityk__Point,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PointVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Point > *arg1 = (std::vector< fityk::Point > *) 0 ;
  unsigned int arg2 ;
  fityk::Point result;
  
  SWIG_check_num_args("std::vector< fityk::Point >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Point >::__getitem__",1,"std::vector< fityk::Point > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< fityk::Point >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Point_t,0))){
    SWIG_fail_ptr("PointVector___getitem",1,SWIGTYPE_p_std__vectorT_fityk__Point_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = std_vector_Sl_fityk_Point_Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  {
    fityk::Point * resultptr = new fityk::Point((const fityk::Point &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_fityk__Point,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PointVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Point > *arg1 = (std::vector< fityk::Point > *) 0 ;
  unsigned int arg2 ;
  fityk::Point arg3 ;
  fityk::Point *argp3 ;
  
  SWIG_check_num_args("std::vector< fityk::Point >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Point >::__setitem__",1,"std::vector< fityk::Point > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< fityk::Point >::__setitem__",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< fityk::Point >::__setitem__",3,"fityk::Point");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Point_t,0))){
    SWIG_fail_ptr("PointVector___setitem",1,SWIGTYPE_p_std__vectorT_fityk__Point_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_fityk__Point,0))){
    SWIG_fail_ptr("PointVector___setitem",3,SWIGTYPE_p_fityk__Point);
  }
  arg3 = *argp3;
  
  try {
    std_vector_Sl_fityk_Point_Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PointVector___len(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Point > *arg1 = (std::vector< fityk::Point > *) 0 ;
  void *arg2 = (void *) 0 ;
  int result;
  
  SWIG_check_num_args("std::vector< fityk::Point >::__len",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Point >::__len",1,"std::vector< fityk::Point > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< fityk::Point >::__len",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Point_t,0))){
    SWIG_fail_ptr("PointVector___len",1,SWIGTYPE_p_std__vectorT_fityk__Point_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PointVector___len");
  result = (int)std_vector_Sl_fityk_Point_Sg____len(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PointVector(void *obj) {
std::vector< fityk::Point > *arg1 = (std::vector< fityk::Point > *) obj;
delete arg1;
}
static int _proxy__wrap_new_PointVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PointVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PointVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PointVector_methods[]= {
    { "size", _wrap_PointVector_size},
    { "max_size", _wrap_PointVector_max_size},
    { "empty", _wrap_PointVector_empty},
    { "clear", _wrap_PointVector_clear},
    { "push_back", _wrap_PointVector_push_back},
    { "pop_back", _wrap_PointVector_pop_back},
    { "front", _wrap_PointVector_front},
    { "back", _wrap_PointVector_back},
    { "__getitem", _wrap_PointVector___getitem},
    { "__setitem", _wrap_PointVector___setitem},
    { "__len", _wrap_PointVector___len},
    {0,0}
};
static swig_lua_method swig_PointVector_meta[] = {
    { "__getitem", _wrap_PointVector___getitem},
    { "__setitem", _wrap_PointVector___setitem},
    { "__len", _wrap_PointVector___len},
    {0,0}
};

static swig_lua_attribute swig_PointVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PointVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PointVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PointVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PointVector_Sf_SwigStatic = {
    "PointVector",
    swig_PointVector_Sf_SwigStatic_methods,
    swig_PointVector_Sf_SwigStatic_attributes,
    swig_PointVector_Sf_SwigStatic_constants,
    swig_PointVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PointVector_bases[] = {0};
static const char *swig_PointVector_base_names[] = {0};
static swig_lua_class _wrap_class_PointVector = { "PointVector", "PointVector", &SWIGTYPE_p_std__vectorT_fityk__Point_t,_proxy__wrap_new_PointVector, swig_delete_PointVector, swig_PointVector_methods, swig_PointVector_attributes, &swig_PointVector_Sf_SwigStatic, swig_PointVector_meta, swig_PointVector_bases, swig_PointVector_base_names };

static int _wrap_new_RealVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",0,0)
  result = (std::vector< double > *)new std::vector< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RealVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RealVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"std::vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("new_RealVector",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RealVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  double arg2 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::vector",2,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (std::vector< double > *)new std::vector< double >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RealVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_RealVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_RealVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_RealVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RealVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RealVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::vector()\n"
    "    std::vector< double >::vector(unsigned int)\n"
    "    std::vector< double >::vector(std::vector< double > const &)\n"
    "    std::vector< double >::vector(unsigned int,double)\n");
  lua_error(L);return 0;
}


static int _wrap_RealVector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::size",1,"std::vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("RealVector_size",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (unsigned int)((std::vector< double > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RealVector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< double >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::max_size",1,"std::vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("RealVector_max_size",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (unsigned int)((std::vector< double > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RealVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< double >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::empty",1,"std::vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("RealVector_empty",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)((std::vector< double > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RealVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::clear",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("RealVector_clear",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RealVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("std::vector< double >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::push_back",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::push_back",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("RealVector_push_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RealVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::pop_back",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("RealVector_pop_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RealVector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::vector< double >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::front",1,"std::vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("RealVector_front",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double)((std::vector< double > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RealVector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::vector< double >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::back",1,"std::vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("RealVector_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double)((std::vector< double > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RealVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  unsigned int arg2 ;
  double result;
  
  SWIG_check_num_args("std::vector< double >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::__getitem__",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("RealVector___getitem",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (double)std_vector_Sl_double_Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RealVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("std::vector< double >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::__setitem__",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::__setitem__",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("RealVector___setitem",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  try {
    std_vector_Sl_double_Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RealVector___len(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *arg2 = (void *) 0 ;
  int result;
  
  SWIG_check_num_args("std::vector< double >::__len",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::__len",1,"std::vector< double > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< double >::__len",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("RealVector___len",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"RealVector___len");
  result = (int)std_vector_Sl_double_Sg____len(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RealVector(void *obj) {
std::vector< double > *arg1 = (std::vector< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_RealVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RealVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RealVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RealVector_methods[]= {
    { "size", _wrap_RealVector_size},
    { "max_size", _wrap_RealVector_max_size},
    { "empty", _wrap_RealVector_empty},
    { "clear", _wrap_RealVector_clear},
    { "push_back", _wrap_RealVector_push_back},
    { "pop_back", _wrap_RealVector_pop_back},
    { "front", _wrap_RealVector_front},
    { "back", _wrap_RealVector_back},
    { "__getitem", _wrap_RealVector___getitem},
    { "__setitem", _wrap_RealVector___setitem},
    { "__len", _wrap_RealVector___len},
    {0,0}
};
static swig_lua_method swig_RealVector_meta[] = {
    { "__getitem", _wrap_RealVector___getitem},
    { "__setitem", _wrap_RealVector___setitem},
    { "__len", _wrap_RealVector___len},
    {0,0}
};

static swig_lua_attribute swig_RealVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RealVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RealVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RealVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RealVector_Sf_SwigStatic = {
    "RealVector",
    swig_RealVector_Sf_SwigStatic_methods,
    swig_RealVector_Sf_SwigStatic_attributes,
    swig_RealVector_Sf_SwigStatic_constants,
    swig_RealVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RealVector_bases[] = {0};
static const char *swig_RealVector_base_names[] = {0};
static swig_lua_class _wrap_class_RealVector = { "RealVector", "RealVector", &SWIGTYPE_p_std__vectorT_double_t,_proxy__wrap_new_RealVector, swig_delete_RealVector, swig_RealVector_methods, swig_RealVector_attributes, &swig_RealVector_Sf_SwigStatic, swig_RealVector_meta, swig_RealVector_bases, swig_RealVector_base_names };

static int _wrap_new_VarVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Var * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< fityk::Var * >::vector",0,0)
  result = (std::vector< fityk::Var * > *)new std::vector< fityk::Var * >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_fityk__Var_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VarVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< fityk::Var * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< fityk::Var * >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< fityk::Var * >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< fityk::Var * > *)new std::vector< fityk::Var * >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_fityk__Var_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VarVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Var * > *arg1 = 0 ;
  std::vector< fityk::Var * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< fityk::Var * >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< fityk::Var * >::vector",1,"std::vector< fityk::Var * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Var_p_t,0))){
    SWIG_fail_ptr("new_VarVector",1,SWIGTYPE_p_std__vectorT_fityk__Var_p_t);
  }
  
  result = (std::vector< fityk::Var * > *)new std::vector< fityk::Var * >((std::vector< fityk::Var * > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_fityk__Var_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VarVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  fityk::Var *arg2 = (fityk::Var *) 0 ;
  std::vector< fityk::Var * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< fityk::Var * >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< fityk::Var * >::vector",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< fityk::Var * >::vector",2,"fityk::Var *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_fityk__Var,0))){
    SWIG_fail_ptr("new_VarVector",2,SWIGTYPE_p_fityk__Var);
  }
  
  result = (std::vector< fityk::Var * > *)new std::vector< fityk::Var * >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_fityk__Var_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VarVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_VarVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_fityk__Var_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_VarVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_VarVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_fityk__Var, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_VarVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_VarVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< fityk::Var * >::vector()\n"
    "    std::vector< fityk::Var * >::vector(unsigned int)\n"
    "    std::vector< fityk::Var * >::vector(std::vector< fityk::Var * > const &)\n"
    "    std::vector< fityk::Var * >::vector(unsigned int,fityk::Var *)\n");
  lua_error(L);return 0;
}


static int _wrap_VarVector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Var * > *arg1 = (std::vector< fityk::Var * > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< fityk::Var * >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Var * >::size",1,"std::vector< fityk::Var * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Var_p_t,0))){
    SWIG_fail_ptr("VarVector_size",1,SWIGTYPE_p_std__vectorT_fityk__Var_p_t);
  }
  
  result = (unsigned int)((std::vector< fityk::Var * > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VarVector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Var * > *arg1 = (std::vector< fityk::Var * > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< fityk::Var * >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Var * >::max_size",1,"std::vector< fityk::Var * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Var_p_t,0))){
    SWIG_fail_ptr("VarVector_max_size",1,SWIGTYPE_p_std__vectorT_fityk__Var_p_t);
  }
  
  result = (unsigned int)((std::vector< fityk::Var * > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VarVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Var * > *arg1 = (std::vector< fityk::Var * > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< fityk::Var * >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Var * >::empty",1,"std::vector< fityk::Var * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Var_p_t,0))){
    SWIG_fail_ptr("VarVector_empty",1,SWIGTYPE_p_std__vectorT_fityk__Var_p_t);
  }
  
  result = (bool)((std::vector< fityk::Var * > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VarVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Var * > *arg1 = (std::vector< fityk::Var * > *) 0 ;
  
  SWIG_check_num_args("std::vector< fityk::Var * >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Var * >::clear",1,"std::vector< fityk::Var * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Var_p_t,0))){
    SWIG_fail_ptr("VarVector_clear",1,SWIGTYPE_p_std__vectorT_fityk__Var_p_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VarVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Var * > *arg1 = (std::vector< fityk::Var * > *) 0 ;
  fityk::Var *arg2 = (fityk::Var *) 0 ;
  
  SWIG_check_num_args("std::vector< fityk::Var * >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Var * >::push_back",1,"std::vector< fityk::Var * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< fityk::Var * >::push_back",2,"fityk::Var *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Var_p_t,0))){
    SWIG_fail_ptr("VarVector_push_back",1,SWIGTYPE_p_std__vectorT_fityk__Var_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_fityk__Var,0))){
    SWIG_fail_ptr("VarVector_push_back",2,SWIGTYPE_p_fityk__Var);
  }
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VarVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Var * > *arg1 = (std::vector< fityk::Var * > *) 0 ;
  
  SWIG_check_num_args("std::vector< fityk::Var * >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Var * >::pop_back",1,"std::vector< fityk::Var * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Var_p_t,0))){
    SWIG_fail_ptr("VarVector_pop_back",1,SWIGTYPE_p_std__vectorT_fityk__Var_p_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VarVector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Var * > *arg1 = (std::vector< fityk::Var * > *) 0 ;
  fityk::Var *result = 0 ;
  
  SWIG_check_num_args("std::vector< fityk::Var * >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Var * >::front",1,"std::vector< fityk::Var * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Var_p_t,0))){
    SWIG_fail_ptr("VarVector_front",1,SWIGTYPE_p_std__vectorT_fityk__Var_p_t);
  }
  
  result = (fityk::Var *)((std::vector< fityk::Var * > const *)arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fityk__Var,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VarVector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Var * > *arg1 = (std::vector< fityk::Var * > *) 0 ;
  fityk::Var *result = 0 ;
  
  SWIG_check_num_args("std::vector< fityk::Var * >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Var * >::back",1,"std::vector< fityk::Var * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Var_p_t,0))){
    SWIG_fail_ptr("VarVector_back",1,SWIGTYPE_p_std__vectorT_fityk__Var_p_t);
  }
  
  result = (fityk::Var *)((std::vector< fityk::Var * > const *)arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fityk__Var,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VarVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Var * > *arg1 = (std::vector< fityk::Var * > *) 0 ;
  unsigned int arg2 ;
  fityk::Var *result = 0 ;
  
  SWIG_check_num_args("std::vector< fityk::Var * >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Var * >::__getitem__",1,"std::vector< fityk::Var * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< fityk::Var * >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Var_p_t,0))){
    SWIG_fail_ptr("VarVector___getitem",1,SWIGTYPE_p_std__vectorT_fityk__Var_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (fityk::Var *)std_vector_Sl_fityk_Var_Sm__Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fityk__Var,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VarVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Var * > *arg1 = (std::vector< fityk::Var * > *) 0 ;
  unsigned int arg2 ;
  fityk::Var *arg3 = (fityk::Var *) 0 ;
  
  SWIG_check_num_args("std::vector< fityk::Var * >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Var * >::__setitem__",1,"std::vector< fityk::Var * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< fityk::Var * >::__setitem__",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("std::vector< fityk::Var * >::__setitem__",3,"fityk::Var *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Var_p_t,0))){
    SWIG_fail_ptr("VarVector___setitem",1,SWIGTYPE_p_std__vectorT_fityk__Var_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_fityk__Var,0))){
    SWIG_fail_ptr("VarVector___setitem",3,SWIGTYPE_p_fityk__Var);
  }
  
  try {
    std_vector_Sl_fityk_Var_Sm__Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VarVector___len(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Var * > *arg1 = (std::vector< fityk::Var * > *) 0 ;
  void *arg2 = (void *) 0 ;
  int result;
  
  SWIG_check_num_args("std::vector< fityk::Var * >::__len",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Var * >::__len",1,"std::vector< fityk::Var * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< fityk::Var * >::__len",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Var_p_t,0))){
    SWIG_fail_ptr("VarVector___len",1,SWIGTYPE_p_std__vectorT_fityk__Var_p_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"VarVector___len");
  result = (int)std_vector_Sl_fityk_Var_Sm__Sg____len(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_VarVector(void *obj) {
std::vector< fityk::Var * > *arg1 = (std::vector< fityk::Var * > *) obj;
delete arg1;
}
static int _proxy__wrap_new_VarVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_VarVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_VarVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_VarVector_methods[]= {
    { "size", _wrap_VarVector_size},
    { "max_size", _wrap_VarVector_max_size},
    { "empty", _wrap_VarVector_empty},
    { "clear", _wrap_VarVector_clear},
    { "push_back", _wrap_VarVector_push_back},
    { "pop_back", _wrap_VarVector_pop_back},
    { "front", _wrap_VarVector_front},
    { "back", _wrap_VarVector_back},
    { "__getitem", _wrap_VarVector___getitem},
    { "__setitem", _wrap_VarVector___setitem},
    { "__len", _wrap_VarVector___len},
    {0,0}
};
static swig_lua_method swig_VarVector_meta[] = {
    { "__getitem", _wrap_VarVector___getitem},
    { "__setitem", _wrap_VarVector___setitem},
    { "__len", _wrap_VarVector___len},
    {0,0}
};

static swig_lua_attribute swig_VarVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_VarVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_VarVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_VarVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_VarVector_Sf_SwigStatic = {
    "VarVector",
    swig_VarVector_Sf_SwigStatic_methods,
    swig_VarVector_Sf_SwigStatic_attributes,
    swig_VarVector_Sf_SwigStatic_constants,
    swig_VarVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_VarVector_bases[] = {0};
static const char *swig_VarVector_base_names[] = {0};
static swig_lua_class _wrap_class_VarVector = { "VarVector", "VarVector", &SWIGTYPE_p_std__vectorT_fityk__Var_p_t,_proxy__wrap_new_VarVector, swig_delete_VarVector, swig_VarVector_methods, swig_VarVector_attributes, &swig_VarVector_Sf_SwigStatic, swig_VarVector_meta, swig_VarVector_bases, swig_VarVector_base_names };

static int _wrap_new_FuncVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Func * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< fityk::Func * >::vector",0,0)
  result = (std::vector< fityk::Func * > *)new std::vector< fityk::Func * >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_fityk__Func_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FuncVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< fityk::Func * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< fityk::Func * >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< fityk::Func * >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< fityk::Func * > *)new std::vector< fityk::Func * >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_fityk__Func_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FuncVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Func * > *arg1 = 0 ;
  std::vector< fityk::Func * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< fityk::Func * >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< fityk::Func * >::vector",1,"std::vector< fityk::Func * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Func_p_t,0))){
    SWIG_fail_ptr("new_FuncVector",1,SWIGTYPE_p_std__vectorT_fityk__Func_p_t);
  }
  
  result = (std::vector< fityk::Func * > *)new std::vector< fityk::Func * >((std::vector< fityk::Func * > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_fityk__Func_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FuncVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  fityk::Func *arg2 = (fityk::Func *) 0 ;
  std::vector< fityk::Func * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< fityk::Func * >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< fityk::Func * >::vector",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< fityk::Func * >::vector",2,"fityk::Func *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_fityk__Func,0))){
    SWIG_fail_ptr("new_FuncVector",2,SWIGTYPE_p_fityk__Func);
  }
  
  result = (std::vector< fityk::Func * > *)new std::vector< fityk::Func * >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_fityk__Func_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FuncVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FuncVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_fityk__Func_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FuncVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FuncVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_fityk__Func, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_FuncVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FuncVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< fityk::Func * >::vector()\n"
    "    std::vector< fityk::Func * >::vector(unsigned int)\n"
    "    std::vector< fityk::Func * >::vector(std::vector< fityk::Func * > const &)\n"
    "    std::vector< fityk::Func * >::vector(unsigned int,fityk::Func *)\n");
  lua_error(L);return 0;
}


static int _wrap_FuncVector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Func * > *arg1 = (std::vector< fityk::Func * > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< fityk::Func * >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Func * >::size",1,"std::vector< fityk::Func * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Func_p_t,0))){
    SWIG_fail_ptr("FuncVector_size",1,SWIGTYPE_p_std__vectorT_fityk__Func_p_t);
  }
  
  result = (unsigned int)((std::vector< fityk::Func * > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FuncVector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Func * > *arg1 = (std::vector< fityk::Func * > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< fityk::Func * >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Func * >::max_size",1,"std::vector< fityk::Func * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Func_p_t,0))){
    SWIG_fail_ptr("FuncVector_max_size",1,SWIGTYPE_p_std__vectorT_fityk__Func_p_t);
  }
  
  result = (unsigned int)((std::vector< fityk::Func * > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FuncVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Func * > *arg1 = (std::vector< fityk::Func * > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< fityk::Func * >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Func * >::empty",1,"std::vector< fityk::Func * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Func_p_t,0))){
    SWIG_fail_ptr("FuncVector_empty",1,SWIGTYPE_p_std__vectorT_fityk__Func_p_t);
  }
  
  result = (bool)((std::vector< fityk::Func * > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FuncVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Func * > *arg1 = (std::vector< fityk::Func * > *) 0 ;
  
  SWIG_check_num_args("std::vector< fityk::Func * >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Func * >::clear",1,"std::vector< fityk::Func * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Func_p_t,0))){
    SWIG_fail_ptr("FuncVector_clear",1,SWIGTYPE_p_std__vectorT_fityk__Func_p_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FuncVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Func * > *arg1 = (std::vector< fityk::Func * > *) 0 ;
  fityk::Func *arg2 = (fityk::Func *) 0 ;
  
  SWIG_check_num_args("std::vector< fityk::Func * >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Func * >::push_back",1,"std::vector< fityk::Func * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< fityk::Func * >::push_back",2,"fityk::Func *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Func_p_t,0))){
    SWIG_fail_ptr("FuncVector_push_back",1,SWIGTYPE_p_std__vectorT_fityk__Func_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_fityk__Func,0))){
    SWIG_fail_ptr("FuncVector_push_back",2,SWIGTYPE_p_fityk__Func);
  }
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FuncVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Func * > *arg1 = (std::vector< fityk::Func * > *) 0 ;
  
  SWIG_check_num_args("std::vector< fityk::Func * >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Func * >::pop_back",1,"std::vector< fityk::Func * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Func_p_t,0))){
    SWIG_fail_ptr("FuncVector_pop_back",1,SWIGTYPE_p_std__vectorT_fityk__Func_p_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FuncVector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Func * > *arg1 = (std::vector< fityk::Func * > *) 0 ;
  fityk::Func *result = 0 ;
  
  SWIG_check_num_args("std::vector< fityk::Func * >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Func * >::front",1,"std::vector< fityk::Func * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Func_p_t,0))){
    SWIG_fail_ptr("FuncVector_front",1,SWIGTYPE_p_std__vectorT_fityk__Func_p_t);
  }
  
  result = (fityk::Func *)((std::vector< fityk::Func * > const *)arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fityk__Func,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FuncVector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Func * > *arg1 = (std::vector< fityk::Func * > *) 0 ;
  fityk::Func *result = 0 ;
  
  SWIG_check_num_args("std::vector< fityk::Func * >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Func * >::back",1,"std::vector< fityk::Func * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Func_p_t,0))){
    SWIG_fail_ptr("FuncVector_back",1,SWIGTYPE_p_std__vectorT_fityk__Func_p_t);
  }
  
  result = (fityk::Func *)((std::vector< fityk::Func * > const *)arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fityk__Func,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FuncVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Func * > *arg1 = (std::vector< fityk::Func * > *) 0 ;
  unsigned int arg2 ;
  fityk::Func *result = 0 ;
  
  SWIG_check_num_args("std::vector< fityk::Func * >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Func * >::__getitem__",1,"std::vector< fityk::Func * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< fityk::Func * >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Func_p_t,0))){
    SWIG_fail_ptr("FuncVector___getitem",1,SWIGTYPE_p_std__vectorT_fityk__Func_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (fityk::Func *)std_vector_Sl_fityk_Func_Sm__Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fityk__Func,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FuncVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Func * > *arg1 = (std::vector< fityk::Func * > *) 0 ;
  unsigned int arg2 ;
  fityk::Func *arg3 = (fityk::Func *) 0 ;
  
  SWIG_check_num_args("std::vector< fityk::Func * >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Func * >::__setitem__",1,"std::vector< fityk::Func * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< fityk::Func * >::__setitem__",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("std::vector< fityk::Func * >::__setitem__",3,"fityk::Func *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Func_p_t,0))){
    SWIG_fail_ptr("FuncVector___setitem",1,SWIGTYPE_p_std__vectorT_fityk__Func_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_fityk__Func,0))){
    SWIG_fail_ptr("FuncVector___setitem",3,SWIGTYPE_p_fityk__Func);
  }
  
  try {
    std_vector_Sl_fityk_Func_Sm__Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FuncVector___len(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fityk::Func * > *arg1 = (std::vector< fityk::Func * > *) 0 ;
  void *arg2 = (void *) 0 ;
  int result;
  
  SWIG_check_num_args("std::vector< fityk::Func * >::__len",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< fityk::Func * >::__len",1,"std::vector< fityk::Func * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< fityk::Func * >::__len",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_fityk__Func_p_t,0))){
    SWIG_fail_ptr("FuncVector___len",1,SWIGTYPE_p_std__vectorT_fityk__Func_p_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"FuncVector___len");
  result = (int)std_vector_Sl_fityk_Func_Sm__Sg____len(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FuncVector(void *obj) {
std::vector< fityk::Func * > *arg1 = (std::vector< fityk::Func * > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FuncVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FuncVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FuncVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FuncVector_methods[]= {
    { "size", _wrap_FuncVector_size},
    { "max_size", _wrap_FuncVector_max_size},
    { "empty", _wrap_FuncVector_empty},
    { "clear", _wrap_FuncVector_clear},
    { "push_back", _wrap_FuncVector_push_back},
    { "pop_back", _wrap_FuncVector_pop_back},
    { "front", _wrap_FuncVector_front},
    { "back", _wrap_FuncVector_back},
    { "__getitem", _wrap_FuncVector___getitem},
    { "__setitem", _wrap_FuncVector___setitem},
    { "__len", _wrap_FuncVector___len},
    {0,0}
};
static swig_lua_method swig_FuncVector_meta[] = {
    { "__getitem", _wrap_FuncVector___getitem},
    { "__setitem", _wrap_FuncVector___setitem},
    { "__len", _wrap_FuncVector___len},
    {0,0}
};

static swig_lua_attribute swig_FuncVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FuncVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FuncVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FuncVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FuncVector_Sf_SwigStatic = {
    "FuncVector",
    swig_FuncVector_Sf_SwigStatic_methods,
    swig_FuncVector_Sf_SwigStatic_attributes,
    swig_FuncVector_Sf_SwigStatic_constants,
    swig_FuncVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FuncVector_bases[] = {0};
static const char *swig_FuncVector_base_names[] = {0};
static swig_lua_class _wrap_class_FuncVector = { "FuncVector", "FuncVector", &SWIGTYPE_p_std__vectorT_fityk__Func_p_t,_proxy__wrap_new_FuncVector, swig_delete_FuncVector, swig_FuncVector_methods, swig_FuncVector_attributes, &swig_FuncVector_Sf_SwigStatic, swig_FuncVector_meta, swig_FuncVector_bases, swig_FuncVector_base_names };

static int _wrap_new_runtime_error(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  std::runtime_error *result = 0 ;
  
  SWIG_check_num_args("std::runtime_error::runtime_error",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("std::runtime_error::runtime_error",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (std::runtime_error *)new std::runtime_error((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__runtime_error,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_runtime_error(void *obj) {
std::runtime_error *arg1 = (std::runtime_error *) obj;
delete arg1;
}
static int _proxy__wrap_new_runtime_error(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_runtime_error);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_runtime_error_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_runtime_error_methods[]= {
    {0,0}
};
static swig_lua_method swig_runtime_error_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_runtime_error_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_runtime_error_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_runtime_error_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_runtime_error_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_runtime_error_Sf_SwigStatic = {
    "runtime_error",
    swig_runtime_error_Sf_SwigStatic_methods,
    swig_runtime_error_Sf_SwigStatic_attributes,
    swig_runtime_error_Sf_SwigStatic_constants,
    swig_runtime_error_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_runtime_error_bases[] = {0};
static const char *swig_runtime_error_base_names[] = {0};
static swig_lua_class _wrap_class_runtime_error = { "runtime_error", "runtime_error", &SWIGTYPE_p_std__runtime_error,_proxy__wrap_new_runtime_error, swig_delete_runtime_error, swig_runtime_error_methods, swig_runtime_error_attributes, &swig_runtime_error_Sf_SwigStatic, swig_runtime_error_meta, swig_runtime_error_bases, swig_runtime_error_base_names };

static int _wrap_new_invalid_argument(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  std::invalid_argument *result = 0 ;
  
  SWIG_check_num_args("std::invalid_argument::invalid_argument",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("std::invalid_argument::invalid_argument",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (std::invalid_argument *)new std::invalid_argument((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__invalid_argument,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_invalid_argument(void *obj) {
std::invalid_argument *arg1 = (std::invalid_argument *) obj;
delete arg1;
}
static int _proxy__wrap_new_invalid_argument(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_invalid_argument);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_invalid_argument_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_invalid_argument_methods[]= {
    {0,0}
};
static swig_lua_method swig_invalid_argument_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_invalid_argument_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_invalid_argument_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_invalid_argument_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_invalid_argument_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_invalid_argument_Sf_SwigStatic = {
    "invalid_argument",
    swig_invalid_argument_Sf_SwigStatic_methods,
    swig_invalid_argument_Sf_SwigStatic_attributes,
    swig_invalid_argument_Sf_SwigStatic_constants,
    swig_invalid_argument_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_invalid_argument_bases[] = {0};
static const char *swig_invalid_argument_base_names[] = {0};
static swig_lua_class _wrap_class_invalid_argument = { "invalid_argument", "invalid_argument", &SWIGTYPE_p_std__invalid_argument,_proxy__wrap_new_invalid_argument, swig_delete_invalid_argument, swig_invalid_argument_methods, swig_invalid_argument_attributes, &swig_invalid_argument_Sf_SwigStatic, swig_invalid_argument_meta, swig_invalid_argument_bases, swig_invalid_argument_base_names };

static int _wrap_new_ExecuteError(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  fityk::ExecuteError *result = 0 ;
  
  SWIG_check_num_args("fityk::ExecuteError::ExecuteError",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("fityk::ExecuteError::ExecuteError",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (fityk::ExecuteError *)new fityk::ExecuteError((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fityk__ExecuteError,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ExecuteError(void *obj) {
fityk::ExecuteError *arg1 = (fityk::ExecuteError *) obj;
delete arg1;
}
static int _proxy__wrap_new_ExecuteError(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ExecuteError);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ExecuteError_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ExecuteError_methods[]= {
    {0,0}
};
static swig_lua_method swig_ExecuteError_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ExecuteError_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ExecuteError_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ExecuteError_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ExecuteError_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ExecuteError_Sf_SwigStatic = {
    "ExecuteError",
    swig_ExecuteError_Sf_SwigStatic_methods,
    swig_ExecuteError_Sf_SwigStatic_attributes,
    swig_ExecuteError_Sf_SwigStatic_constants,
    swig_ExecuteError_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ExecuteError_bases[] = {0,0};
static const char *swig_ExecuteError_base_names[] = {"std::runtime_error *",0};
static swig_lua_class _wrap_class_ExecuteError = { "ExecuteError", "ExecuteError", &SWIGTYPE_p_fityk__ExecuteError,_proxy__wrap_new_ExecuteError, swig_delete_ExecuteError, swig_ExecuteError_methods, swig_ExecuteError_attributes, &swig_ExecuteError_Sf_SwigStatic, swig_ExecuteError_meta, swig_ExecuteError_bases, swig_ExecuteError_base_names };

static int _wrap_new_SyntaxError__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  fityk::SyntaxError *result = 0 ;
  
  SWIG_check_num_args("fityk::SyntaxError::SyntaxError",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("fityk::SyntaxError::SyntaxError",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (fityk::SyntaxError *)new fityk::SyntaxError((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fityk__SyntaxError,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxError__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  fityk::SyntaxError *result = 0 ;
  
  SWIG_check_num_args("fityk::SyntaxError::SyntaxError",0,0)
  result = (fityk::SyntaxError *)new fityk::SyntaxError();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fityk__SyntaxError,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxError(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SyntaxError__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_SyntaxError__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SyntaxError'\n"
    "  Possible C/C++ prototypes are:\n"
    "    fityk::SyntaxError::SyntaxError(std::string const &)\n"
    "    fityk::SyntaxError::SyntaxError()\n");
  lua_error(L);return 0;
}


static void swig_delete_SyntaxError(void *obj) {
fityk::SyntaxError *arg1 = (fityk::SyntaxError *) obj;
delete arg1;
}
static int _proxy__wrap_new_SyntaxError(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SyntaxError);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SyntaxError_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SyntaxError_methods[]= {
    {0,0}
};
static swig_lua_method swig_SyntaxError_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SyntaxError_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SyntaxError_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SyntaxError_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SyntaxError_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SyntaxError_Sf_SwigStatic = {
    "SyntaxError",
    swig_SyntaxError_Sf_SwigStatic_methods,
    swig_SyntaxError_Sf_SwigStatic_attributes,
    swig_SyntaxError_Sf_SwigStatic_constants,
    swig_SyntaxError_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SyntaxError_bases[] = {0,0};
static const char *swig_SyntaxError_base_names[] = {"std::invalid_argument *",0};
static swig_lua_class _wrap_class_SyntaxError = { "SyntaxError", "SyntaxError", &SWIGTYPE_p_fityk__SyntaxError,_proxy__wrap_new_SyntaxError, swig_delete_SyntaxError, swig_SyntaxError_methods, swig_SyntaxError_attributes, &swig_SyntaxError_Sf_SwigStatic, swig_SyntaxError_meta, swig_SyntaxError_bases, swig_SyntaxError_base_names };

static int _wrap_new_ExitRequestedException(lua_State* L) {
  int SWIG_arg = 0;
  fityk::ExitRequestedException *result = 0 ;
  
  SWIG_check_num_args("fityk::ExitRequestedException::ExitRequestedException",0,0)
  result = (fityk::ExitRequestedException *)new fityk::ExitRequestedException();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fityk__ExitRequestedException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ExitRequestedException(void *obj) {
fityk::ExitRequestedException *arg1 = (fityk::ExitRequestedException *) obj;
delete arg1;
}
static int _proxy__wrap_new_ExitRequestedException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ExitRequestedException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ExitRequestedException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ExitRequestedException_methods[]= {
    {0,0}
};
static swig_lua_method swig_ExitRequestedException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ExitRequestedException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ExitRequestedException_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ExitRequestedException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ExitRequestedException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ExitRequestedException_Sf_SwigStatic = {
    "ExitRequestedException",
    swig_ExitRequestedException_Sf_SwigStatic_methods,
    swig_ExitRequestedException_Sf_SwigStatic_attributes,
    swig_ExitRequestedException_Sf_SwigStatic_constants,
    swig_ExitRequestedException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ExitRequestedException_bases[] = {0};
static const char *swig_ExitRequestedException_base_names[] = {0};
static swig_lua_class _wrap_class_ExitRequestedException = { "ExitRequestedException", "ExitRequestedException", &SWIGTYPE_p_fityk__ExitRequestedException,_proxy__wrap_new_ExitRequestedException, swig_delete_ExitRequestedException, swig_ExitRequestedException_methods, swig_ExitRequestedException_attributes, &swig_ExitRequestedException_Sf_SwigStatic, swig_ExitRequestedException_meta, swig_ExitRequestedException_bases, swig_ExitRequestedException_base_names };

static int _wrap_RealRange_lo_set(lua_State* L) {
  int SWIG_arg = 0;
  fityk::RealRange *arg1 = (fityk::RealRange *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("fityk::RealRange::lo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::RealRange::lo",1,"fityk::RealRange *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::RealRange::lo",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__RealRange,0))){
    SWIG_fail_ptr("RealRange_lo_set",1,SWIGTYPE_p_fityk__RealRange);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->lo = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RealRange_lo_get(lua_State* L) {
  int SWIG_arg = 0;
  fityk::RealRange *arg1 = (fityk::RealRange *) 0 ;
  double result;
  
  SWIG_check_num_args("fityk::RealRange::lo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::RealRange::lo",1,"fityk::RealRange *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__RealRange,0))){
    SWIG_fail_ptr("RealRange_lo_get",1,SWIGTYPE_p_fityk__RealRange);
  }
  
  result = (double) ((arg1)->lo);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RealRange_hi_set(lua_State* L) {
  int SWIG_arg = 0;
  fityk::RealRange *arg1 = (fityk::RealRange *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("fityk::RealRange::hi",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::RealRange::hi",1,"fityk::RealRange *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::RealRange::hi",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__RealRange,0))){
    SWIG_fail_ptr("RealRange_hi_set",1,SWIGTYPE_p_fityk__RealRange);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->hi = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RealRange_hi_get(lua_State* L) {
  int SWIG_arg = 0;
  fityk::RealRange *arg1 = (fityk::RealRange *) 0 ;
  double result;
  
  SWIG_check_num_args("fityk::RealRange::hi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::RealRange::hi",1,"fityk::RealRange *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__RealRange,0))){
    SWIG_fail_ptr("RealRange_hi_get",1,SWIGTYPE_p_fityk__RealRange);
  }
  
  result = (double) ((arg1)->hi);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RealRange__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  fityk::RealRange *result = 0 ;
  
  SWIG_check_num_args("fityk::RealRange::RealRange",0,0)
  result = (fityk::RealRange *)new fityk::RealRange();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fityk__RealRange,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RealRange__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  fityk::RealRange *result = 0 ;
  
  SWIG_check_num_args("fityk::RealRange::RealRange",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fityk::RealRange::RealRange",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::RealRange::RealRange",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (fityk::RealRange *)new fityk::RealRange(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fityk__RealRange,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RealRange(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_RealRange__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RealRange__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RealRange'\n"
    "  Possible C/C++ prototypes are:\n"
    "    fityk::RealRange::RealRange()\n"
    "    fityk::RealRange::RealRange(double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_RealRange_lo_inf(lua_State* L) {
  int SWIG_arg = 0;
  fityk::RealRange *arg1 = (fityk::RealRange *) 0 ;
  bool result;
  
  SWIG_check_num_args("fityk::RealRange::lo_inf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::RealRange::lo_inf",1,"fityk::RealRange const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__RealRange,0))){
    SWIG_fail_ptr("RealRange_lo_inf",1,SWIGTYPE_p_fityk__RealRange);
  }
  
  result = (bool)((fityk::RealRange const *)arg1)->lo_inf();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RealRange_hi_inf(lua_State* L) {
  int SWIG_arg = 0;
  fityk::RealRange *arg1 = (fityk::RealRange *) 0 ;
  bool result;
  
  SWIG_check_num_args("fityk::RealRange::hi_inf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::RealRange::hi_inf",1,"fityk::RealRange const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__RealRange,0))){
    SWIG_fail_ptr("RealRange_hi_inf",1,SWIGTYPE_p_fityk__RealRange);
  }
  
  result = (bool)((fityk::RealRange const *)arg1)->hi_inf();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RealRange_str(lua_State* L) {
  int SWIG_arg = 0;
  fityk::RealRange *arg1 = (fityk::RealRange *) 0 ;
  std::string result;
  
  SWIG_check_num_args("fityk::RealRange::str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::RealRange::str",1,"fityk::RealRange const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__RealRange,0))){
    SWIG_fail_ptr("RealRange_str",1,SWIGTYPE_p_fityk__RealRange);
  }
  
  result = ((fityk::RealRange const *)arg1)->str();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RealRange(void *obj) {
fityk::RealRange *arg1 = (fityk::RealRange *) obj;
delete arg1;
}
static int _proxy__wrap_new_RealRange(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RealRange);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RealRange_attributes[] = {
    { "lo", _wrap_RealRange_lo_get, _wrap_RealRange_lo_set },
    { "hi", _wrap_RealRange_hi_get, _wrap_RealRange_hi_set },
    {0,0,0}
};
static swig_lua_method swig_RealRange_methods[]= {
    { "lo_inf", _wrap_RealRange_lo_inf},
    { "hi_inf", _wrap_RealRange_hi_inf},
    { "str", _wrap_RealRange_str},
    {0,0}
};
static swig_lua_method swig_RealRange_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RealRange_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RealRange_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RealRange_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RealRange_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RealRange_Sf_SwigStatic = {
    "RealRange",
    swig_RealRange_Sf_SwigStatic_methods,
    swig_RealRange_Sf_SwigStatic_attributes,
    swig_RealRange_Sf_SwigStatic_constants,
    swig_RealRange_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RealRange_bases[] = {0};
static const char *swig_RealRange_base_names[] = {0};
static swig_lua_class _wrap_class_RealRange = { "RealRange", "RealRange", &SWIGTYPE_p_fityk__RealRange,_proxy__wrap_new_RealRange, swig_delete_RealRange, swig_RealRange_methods, swig_RealRange_attributes, &swig_RealRange_Sf_SwigStatic, swig_RealRange_meta, swig_RealRange_bases, swig_RealRange_base_names };

static int _wrap_Var_name_get(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Var *arg1 = (fityk::Var *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("fityk::Var::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Var::name",1,"fityk::Var *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Var,0))){
    SWIG_fail_ptr("Var_name_get",1,SWIGTYPE_p_fityk__Var);
  }
  
  result = (std::string *) & ((arg1)->name);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Var_domain_set(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Var *arg1 = (fityk::Var *) 0 ;
  fityk::RealRange *arg2 = (fityk::RealRange *) 0 ;
  
  SWIG_check_num_args("fityk::Var::domain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Var::domain",1,"fityk::Var *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("fityk::Var::domain",2,"fityk::RealRange *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Var,0))){
    SWIG_fail_ptr("Var_domain_set",1,SWIGTYPE_p_fityk__Var);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_fityk__RealRange,0))){
    SWIG_fail_ptr("Var_domain_set",2,SWIGTYPE_p_fityk__RealRange);
  }
  
  if (arg1) (arg1)->domain = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Var_domain_get(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Var *arg1 = (fityk::Var *) 0 ;
  fityk::RealRange *result = 0 ;
  
  SWIG_check_num_args("fityk::Var::domain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Var::domain",1,"fityk::Var *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Var,0))){
    SWIG_fail_ptr("Var_domain_get",1,SWIGTYPE_p_fityk__Var);
  }
  
  result = (fityk::RealRange *)& ((arg1)->domain);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fityk__RealRange,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Var_value(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Var *arg1 = (fityk::Var *) 0 ;
  realt result;
  
  SWIG_check_num_args("fityk::Var::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Var::value",1,"fityk::Var const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Var,0))){
    SWIG_fail_ptr("Var_value",1,SWIGTYPE_p_fityk__Var);
  }
  
  result = (realt)((fityk::Var const *)arg1)->value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Var_gpos(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Var *arg1 = (fityk::Var *) 0 ;
  int result;
  
  SWIG_check_num_args("fityk::Var::gpos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Var::gpos",1,"fityk::Var const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Var,0))){
    SWIG_fail_ptr("Var_gpos",1,SWIGTYPE_p_fityk__Var);
  }
  
  result = (int)((fityk::Var const *)arg1)->gpos();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Var_is_simple(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Var *arg1 = (fityk::Var *) 0 ;
  bool result;
  
  SWIG_check_num_args("fityk::Var::is_simple",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Var::is_simple",1,"fityk::Var const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Var,0))){
    SWIG_fail_ptr("Var_is_simple",1,SWIGTYPE_p_fityk__Var);
  }
  
  result = (bool)((fityk::Var const *)arg1)->is_simple();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Var___tostring(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Var *arg1 = (fityk::Var *) 0 ;
  std::string result;
  
  SWIG_check_num_args("fityk::Var::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Var::__str__",1,"fityk::Var *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Var,0))){
    SWIG_fail_ptr("Var___tostring",1,SWIGTYPE_p_fityk__Var);
  }
  
  result = fityk_Var___str__(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_Var_attributes[] = {
    { "name", _wrap_Var_name_get, SWIG_Lua_set_immutable },
    { "domain", _wrap_Var_domain_get, _wrap_Var_domain_set },
    {0,0,0}
};
static swig_lua_method swig_Var_methods[]= {
    { "value", _wrap_Var_value},
    { "gpos", _wrap_Var_gpos},
    { "is_simple", _wrap_Var_is_simple},
    { "__tostring", _wrap_Var___tostring},
    {0,0}
};
static swig_lua_method swig_Var_meta[] = {
    { "__tostring", _wrap_Var___tostring},
    {0,0}
};

static swig_lua_attribute swig_Var_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Var_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Var_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Var_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Var_Sf_SwigStatic = {
    "Var",
    swig_Var_Sf_SwigStatic_methods,
    swig_Var_Sf_SwigStatic_attributes,
    swig_Var_Sf_SwigStatic_constants,
    swig_Var_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Var_bases[] = {0};
static const char *swig_Var_base_names[] = {0};
static swig_lua_class _wrap_class_Var = { "Var", "Var", &SWIGTYPE_p_fityk__Var,0,0, swig_Var_methods, swig_Var_attributes, &swig_Var_Sf_SwigStatic, swig_Var_meta, swig_Var_bases, swig_Var_base_names };

static int _wrap_Func_name_get(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Func *arg1 = (fityk::Func *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("fityk::Func::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Func::name",1,"fityk::Func *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Func,0))){
    SWIG_fail_ptr("Func_name_get",1,SWIGTYPE_p_fityk__Func);
  }
  
  result = (std::string *) & ((arg1)->name);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Func_get_template_name(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Func *arg1 = (fityk::Func *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("fityk::Func::get_template_name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Func::get_template_name",1,"fityk::Func const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Func,0))){
    SWIG_fail_ptr("Func_get_template_name",1,SWIGTYPE_p_fityk__Func);
  }
  
  result = (std::string *) &((fityk::Func const *)arg1)->get_template_name();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Func_get_param(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Func *arg1 = (fityk::Func *) 0 ;
  int arg2 ;
  std::string result;
  
  SWIG_check_num_args("fityk::Func::get_param",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Func::get_param",1,"fityk::Func const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::Func::get_param",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Func,0))){
    SWIG_fail_ptr("Func_get_param",1,SWIGTYPE_p_fityk__Func);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((fityk::Func const *)arg1)->get_param(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Func_var_name(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Func *arg1 = (fityk::Func *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("fityk::Func::var_name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Func::var_name",1,"fityk::Func const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("fityk::Func::var_name",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Func,0))){
    SWIG_fail_ptr("Func_var_name",1,SWIGTYPE_p_fityk__Func);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = (std::string *) &((fityk::Func const *)arg1)->var_name((std::string const &)*arg2);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Func_get_param_value(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Func *arg1 = (fityk::Func *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  realt result;
  
  SWIG_check_num_args("fityk::Func::get_param_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Func::get_param_value",1,"fityk::Func const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("fityk::Func::get_param_value",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Func,0))){
    SWIG_fail_ptr("Func_get_param_value",1,SWIGTYPE_p_fityk__Func);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = (realt)((fityk::Func const *)arg1)->get_param_value((std::string const &)*arg2);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Func_value_at(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Func *arg1 = (fityk::Func *) 0 ;
  realt arg2 ;
  realt result;
  
  SWIG_check_num_args("fityk::Func::value_at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Func::value_at",1,"fityk::Func const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::Func::value_at",2,"realt");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Func,0))){
    SWIG_fail_ptr("Func_value_at",1,SWIGTYPE_p_fityk__Func);
  }
  
  arg2 = (realt)lua_tonumber(L, 2);
  result = (realt)((fityk::Func const *)arg1)->value_at(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Func___tostring(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Func *arg1 = (fityk::Func *) 0 ;
  std::string result;
  
  SWIG_check_num_args("fityk::Func::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Func::__str__",1,"fityk::Func *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Func,0))){
    SWIG_fail_ptr("Func___tostring",1,SWIGTYPE_p_fityk__Func);
  }
  
  result = fityk_Func___str__(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Func(void *obj) {
fityk::Func *arg1 = (fityk::Func *) obj;
delete arg1;
}
static swig_lua_attribute swig_Func_attributes[] = {
    { "name", _wrap_Func_name_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_method swig_Func_methods[]= {
    { "get_template_name", _wrap_Func_get_template_name},
    { "get_param", _wrap_Func_get_param},
    { "var_name", _wrap_Func_var_name},
    { "get_param_value", _wrap_Func_get_param_value},
    { "value_at", _wrap_Func_value_at},
    { "__tostring", _wrap_Func___tostring},
    {0,0}
};
static swig_lua_method swig_Func_meta[] = {
    { "__tostring", _wrap_Func___tostring},
    {0,0}
};

static swig_lua_attribute swig_Func_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Func_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Func_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Func_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Func_Sf_SwigStatic = {
    "Func",
    swig_Func_Sf_SwigStatic_methods,
    swig_Func_Sf_SwigStatic_attributes,
    swig_Func_Sf_SwigStatic_constants,
    swig_Func_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Func_bases[] = {0};
static const char *swig_Func_base_names[] = {0};
static swig_lua_class _wrap_class_Func = { "Func", "Func", &SWIGTYPE_p_fityk__Func,0, swig_delete_Func, swig_Func_methods, swig_Func_attributes, &swig_Func_Sf_SwigStatic, swig_Func_meta, swig_Func_bases, swig_Func_base_names };

static int _wrap_Point_x_set(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Point *arg1 = (fityk::Point *) 0 ;
  realt arg2 ;
  
  SWIG_check_num_args("fityk::Point::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Point::x",1,"fityk::Point *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::Point::x",2,"realt");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Point,0))){
    SWIG_fail_ptr("Point_x_set",1,SWIGTYPE_p_fityk__Point);
  }
  
  arg2 = (realt)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point_x_get(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Point *arg1 = (fityk::Point *) 0 ;
  realt result;
  
  SWIG_check_num_args("fityk::Point::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Point::x",1,"fityk::Point *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Point,0))){
    SWIG_fail_ptr("Point_x_get",1,SWIGTYPE_p_fityk__Point);
  }
  
  result = (realt) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point_y_set(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Point *arg1 = (fityk::Point *) 0 ;
  realt arg2 ;
  
  SWIG_check_num_args("fityk::Point::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Point::y",1,"fityk::Point *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::Point::y",2,"realt");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Point,0))){
    SWIG_fail_ptr("Point_y_set",1,SWIGTYPE_p_fityk__Point);
  }
  
  arg2 = (realt)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point_y_get(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Point *arg1 = (fityk::Point *) 0 ;
  realt result;
  
  SWIG_check_num_args("fityk::Point::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Point::y",1,"fityk::Point *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Point,0))){
    SWIG_fail_ptr("Point_y_get",1,SWIGTYPE_p_fityk__Point);
  }
  
  result = (realt) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point_sigma_set(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Point *arg1 = (fityk::Point *) 0 ;
  realt arg2 ;
  
  SWIG_check_num_args("fityk::Point::sigma",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Point::sigma",1,"fityk::Point *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::Point::sigma",2,"realt");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Point,0))){
    SWIG_fail_ptr("Point_sigma_set",1,SWIGTYPE_p_fityk__Point);
  }
  
  arg2 = (realt)lua_tonumber(L, 2);
  if (arg1) (arg1)->sigma = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point_sigma_get(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Point *arg1 = (fityk::Point *) 0 ;
  realt result;
  
  SWIG_check_num_args("fityk::Point::sigma",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Point::sigma",1,"fityk::Point *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Point,0))){
    SWIG_fail_ptr("Point_sigma_get",1,SWIGTYPE_p_fityk__Point);
  }
  
  result = (realt) ((arg1)->sigma);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point_is_active_set(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Point *arg1 = (fityk::Point *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("fityk::Point::is_active",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Point::is_active",1,"fityk::Point *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("fityk::Point::is_active",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Point,0))){
    SWIG_fail_ptr("Point_is_active_set",1,SWIGTYPE_p_fityk__Point);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->is_active = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point_is_active_get(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Point *arg1 = (fityk::Point *) 0 ;
  bool result;
  
  SWIG_check_num_args("fityk::Point::is_active",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Point::is_active",1,"fityk::Point *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Point,0))){
    SWIG_fail_ptr("Point_is_active_get",1,SWIGTYPE_p_fityk__Point);
  }
  
  result = (bool) ((arg1)->is_active);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Point__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Point *result = 0 ;
  
  SWIG_check_num_args("fityk::Point::Point",0,0)
  result = (fityk::Point *)new fityk::Point();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fityk__Point,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Point__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  realt arg1 ;
  realt arg2 ;
  fityk::Point *result = 0 ;
  
  SWIG_check_num_args("fityk::Point::Point",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fityk::Point::Point",1,"realt");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::Point::Point",2,"realt");
  arg1 = (realt)lua_tonumber(L, 1);
  arg2 = (realt)lua_tonumber(L, 2);
  result = (fityk::Point *)new fityk::Point(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fityk__Point,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Point__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  realt arg1 ;
  realt arg2 ;
  realt arg3 ;
  fityk::Point *result = 0 ;
  
  SWIG_check_num_args("fityk::Point::Point",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fityk::Point::Point",1,"realt");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::Point::Point",2,"realt");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("fityk::Point::Point",3,"realt");
  arg1 = (realt)lua_tonumber(L, 1);
  arg2 = (realt)lua_tonumber(L, 2);
  arg3 = (realt)lua_tonumber(L, 3);
  result = (fityk::Point *)new fityk::Point(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fityk__Point,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Point(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Point__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Point__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Point__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Point'\n"
    "  Possible C/C++ prototypes are:\n"
    "    fityk::Point::Point()\n"
    "    fityk::Point::Point(realt,realt)\n"
    "    fityk::Point::Point(realt,realt,realt)\n");
  lua_error(L);return 0;
}


static int _wrap_Point_str(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Point *arg1 = (fityk::Point *) 0 ;
  std::string result;
  
  SWIG_check_num_args("fityk::Point::str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Point::str",1,"fityk::Point const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Point,0))){
    SWIG_fail_ptr("Point_str",1,SWIGTYPE_p_fityk__Point);
  }
  
  result = ((fityk::Point const *)arg1)->str();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point___lt(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Point *arg1 = (fityk::Point *) 0 ;
  fityk::Point *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("fityk::Point::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Point::operator <",1,"fityk::Point const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("fityk::Point::operator <",2,"fityk::Point const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Point,0))){
    SWIG_fail_ptr("Point___lt",1,SWIGTYPE_p_fityk__Point);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_fityk__Point,0))){
    SWIG_fail_ptr("Point___lt",2,SWIGTYPE_p_fityk__Point);
  }
  
  result = (bool)((fityk::Point const *)arg1)->operator <((fityk::Point const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point___tostring(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Point *arg1 = (fityk::Point *) 0 ;
  std::string result;
  
  SWIG_check_num_args("fityk::Point::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Point::__str__",1,"fityk::Point *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Point,0))){
    SWIG_fail_ptr("Point___tostring",1,SWIGTYPE_p_fityk__Point);
  }
  
  result = fityk_Point___str__(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Point(void *obj) {
fityk::Point *arg1 = (fityk::Point *) obj;
delete arg1;
}
static int _proxy__wrap_new_Point(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Point);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Point_attributes[] = {
    { "x", _wrap_Point_x_get, _wrap_Point_x_set },
    { "y", _wrap_Point_y_get, _wrap_Point_y_set },
    { "sigma", _wrap_Point_sigma_get, _wrap_Point_sigma_set },
    { "is_active", _wrap_Point_is_active_get, _wrap_Point_is_active_set },
    {0,0,0}
};
static swig_lua_method swig_Point_methods[]= {
    { "str", _wrap_Point_str},
    { "__lt", _wrap_Point___lt},
    { "__tostring", _wrap_Point___tostring},
    {0,0}
};
static swig_lua_method swig_Point_meta[] = {
    { "__lt", _wrap_Point___lt},
    { "__tostring", _wrap_Point___tostring},
    {0,0}
};

static swig_lua_attribute swig_Point_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Point_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Point_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Point_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Point_Sf_SwigStatic = {
    "Point",
    swig_Point_Sf_SwigStatic_methods,
    swig_Point_Sf_SwigStatic_attributes,
    swig_Point_Sf_SwigStatic_constants,
    swig_Point_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Point_bases[] = {0};
static const char *swig_Point_base_names[] = {0};
static swig_lua_class _wrap_class_Point = { "Point", "Point", &SWIGTYPE_p_fityk__Point,_proxy__wrap_new_Point, swig_delete_Point, swig_Point_methods, swig_Point_attributes, &swig_Point_Sf_SwigStatic, swig_Point_meta, swig_Point_bases, swig_Point_base_names };

static int _wrap_new_Fityk__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *result = 0 ;
  
  SWIG_check_num_args("fityk::Fityk::Fityk",0,0)
  result = (fityk::Fityk *)new fityk::Fityk();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fityk__Fityk,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Fityk__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Full *arg1 = (fityk::Full *) 0 ;
  fityk::Fityk *result = 0 ;
  
  SWIG_check_num_args("fityk::Fityk::Fityk",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::Fityk",1,"fityk::Full *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Full,0))){
    SWIG_fail_ptr("new_Fityk",1,SWIGTYPE_p_fityk__Full);
  }
  
  result = (fityk::Fityk *)new fityk::Fityk(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fityk__Fityk,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Fityk(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Fityk__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Full, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Fityk__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Fityk'\n"
    "  Possible C/C++ prototypes are:\n"
    "    fityk::Fityk::Fityk()\n"
    "    fityk::Fityk::Fityk(fityk::Full *)\n");
  lua_error(L);return 0;
}


static int _wrap_Fityk_execute(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("fityk::Fityk::execute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::execute",1,"fityk::Fityk *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("fityk::Fityk::execute",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_execute",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    (arg1)->execute((std::string const &)*arg2);
  }
  catch(fityk::SyntaxError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  catch(fityk::ExitRequestedException &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_fityk__ExitRequestedException));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_load__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  std::string *arg8 = 0 ;
  std::string *arg9 = 0 ;
  std::string temp3 ;
  std::string temp8 ;
  std::string temp9 ;
  
  SWIG_check_num_args("fityk::Fityk::load",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::load",1,"fityk::Fityk *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::Fityk::load",2,"int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("fityk::Fityk::load",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("fityk::Fityk::load",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("fityk::Fityk::load",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("fityk::Fityk::load",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("fityk::Fityk::load",7,"int");
  if(!lua_isstring(L,8)) SWIG_fail_arg("fityk::Fityk::load",8,"std::string const &");
  if(!lua_isstring(L,9)) SWIG_fail_arg("fityk::Fityk::load",9,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_load",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  temp8.assign(lua_tostring(L,8),lua_rawlen(L,8)); arg8=&temp8;
  temp9.assign(lua_tostring(L,9),lua_rawlen(L,9)); arg9=&temp9;
  try {
    (arg1)->load(arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,(std::string const &)*arg8,(std::string const &)*arg9);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_load__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  std::string *arg8 = 0 ;
  std::string temp3 ;
  std::string temp8 ;
  
  SWIG_check_num_args("fityk::Fityk::load",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::load",1,"fityk::Fityk *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::Fityk::load",2,"int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("fityk::Fityk::load",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("fityk::Fityk::load",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("fityk::Fityk::load",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("fityk::Fityk::load",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("fityk::Fityk::load",7,"int");
  if(!lua_isstring(L,8)) SWIG_fail_arg("fityk::Fityk::load",8,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_load",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  temp8.assign(lua_tostring(L,8),lua_rawlen(L,8)); arg8=&temp8;
  try {
    (arg1)->load(arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,(std::string const &)*arg8);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_load__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  std::string temp3 ;
  
  SWIG_check_num_args("fityk::Fityk::load",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::load",1,"fityk::Fityk *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::Fityk::load",2,"int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("fityk::Fityk::load",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("fityk::Fityk::load",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("fityk::Fityk::load",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("fityk::Fityk::load",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("fityk::Fityk::load",7,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_load",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  try {
    (arg1)->load(arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_load__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  std::string temp3 ;
  
  SWIG_check_num_args("fityk::Fityk::load",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::load",1,"fityk::Fityk *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::Fityk::load",2,"int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("fityk::Fityk::load",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("fityk::Fityk::load",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("fityk::Fityk::load",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("fityk::Fityk::load",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_load",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  try {
    (arg1)->load(arg2,(std::string const &)*arg3,arg4,arg5,arg6);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_load__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  std::string temp3 ;
  
  SWIG_check_num_args("fityk::Fityk::load",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::load",1,"fityk::Fityk *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::Fityk::load",2,"int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("fityk::Fityk::load",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("fityk::Fityk::load",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("fityk::Fityk::load",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_load",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  try {
    (arg1)->load(arg2,(std::string const &)*arg3,arg4,arg5);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_load__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string temp3 ;
  
  SWIG_check_num_args("fityk::Fityk::load",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::load",1,"fityk::Fityk *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::Fityk::load",2,"int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("fityk::Fityk::load",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("fityk::Fityk::load",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_load",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  arg4 = (int)lua_tonumber(L, 4);
  try {
    (arg1)->load(arg2,(std::string const &)*arg3,arg4);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_load__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("fityk::Fityk::load",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::load",1,"fityk::Fityk *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::Fityk::load",2,"int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("fityk::Fityk::load",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_load",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  try {
    (arg1)->load(arg2,(std::string const &)*arg3);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_load(lua_State* L) {
  int argc;
  int argv[10]={
    1,2,3,4,5,6,7,8,9,10
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Fityk_load__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Fityk_load__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Fityk_load__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_Fityk_load__SWIG_3(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_Fityk_load__SWIG_2(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isstring(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_Fityk_load__SWIG_1(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isstring(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isstring(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_Fityk_load__SWIG_0(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Fityk_load'\n"
    "  Possible C/C++ prototypes are:\n"
    "    fityk::Fityk::load(int,std::string const &,int,int,int,int,std::string const &,std::string const &)\n"
    "    fityk::Fityk::load(int,std::string const &,int,int,int,int,std::string const &)\n"
    "    fityk::Fityk::load(int,std::string const &,int,int,int,int)\n"
    "    fityk::Fityk::load(int,std::string const &,int,int,int)\n"
    "    fityk::Fityk::load(int,std::string const &,int,int)\n"
    "    fityk::Fityk::load(int,std::string const &,int)\n"
    "    fityk::Fityk::load(int,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Fityk_load_data__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  int arg2 ;
  std::vector< realt > *arg3 = 0 ;
  std::vector< realt > *arg4 = 0 ;
  std::vector< realt > *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string temp6 ;
  
  SWIG_check_num_args("fityk::Fityk::load_data",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::load_data",1,"fityk::Fityk *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::Fityk::load_data",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("fityk::Fityk::load_data",3,"std::vector< realt > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("fityk::Fityk::load_data",4,"std::vector< realt > const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("fityk::Fityk::load_data",5,"std::vector< realt > const &");
  if(!lua_isstring(L,6)) SWIG_fail_arg("fityk::Fityk::load_data",6,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_load_data",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("Fityk_load_data",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("Fityk_load_data",4,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("Fityk_load_data",5,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  temp6.assign(lua_tostring(L,6),lua_rawlen(L,6)); arg6=&temp6;
  try {
    (arg1)->load_data(arg2,(std::vector< realt > const &)*arg3,(std::vector< realt > const &)*arg4,(std::vector< realt > const &)*arg5,(std::string const &)*arg6);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_load_data__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  int arg2 ;
  std::vector< realt > *arg3 = 0 ;
  std::vector< realt > *arg4 = 0 ;
  std::vector< realt > *arg5 = 0 ;
  
  SWIG_check_num_args("fityk::Fityk::load_data",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::load_data",1,"fityk::Fityk *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::Fityk::load_data",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("fityk::Fityk::load_data",3,"std::vector< realt > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("fityk::Fityk::load_data",4,"std::vector< realt > const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("fityk::Fityk::load_data",5,"std::vector< realt > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_load_data",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("Fityk_load_data",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("Fityk_load_data",4,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("Fityk_load_data",5,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  try {
    (arg1)->load_data(arg2,(std::vector< realt > const &)*arg3,(std::vector< realt > const &)*arg4,(std::vector< realt > const &)*arg5);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_load_data(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Fityk_load_data__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isstring(L,argv[5]);
              }
              if (_v) {
                return _wrap_Fityk_load_data__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Fityk_load_data'\n"
    "  Possible C/C++ prototypes are:\n"
    "    fityk::Fityk::load_data(int,std::vector< realt > const &,std::vector< realt > const &,std::vector< realt > const &,std::string const &)\n"
    "    fityk::Fityk::load_data(int,std::vector< realt > const &,std::vector< realt > const &,std::vector< realt > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Fityk_add_point__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  realt arg2 ;
  realt arg3 ;
  realt arg4 ;
  int arg5 ;
  
  SWIG_check_num_args("fityk::Fityk::add_point",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::add_point",1,"fityk::Fityk *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::Fityk::add_point",2,"realt");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("fityk::Fityk::add_point",3,"realt");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("fityk::Fityk::add_point",4,"realt");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("fityk::Fityk::add_point",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_add_point",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  arg2 = (realt)lua_tonumber(L, 2);
  arg3 = (realt)lua_tonumber(L, 3);
  arg4 = (realt)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  try {
    (arg1)->add_point(arg2,arg3,arg4,arg5);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_add_point__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  realt arg2 ;
  realt arg3 ;
  realt arg4 ;
  
  SWIG_check_num_args("fityk::Fityk::add_point",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::add_point",1,"fityk::Fityk *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::Fityk::add_point",2,"realt");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("fityk::Fityk::add_point",3,"realt");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("fityk::Fityk::add_point",4,"realt");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_add_point",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  arg2 = (realt)lua_tonumber(L, 2);
  arg3 = (realt)lua_tonumber(L, 3);
  arg4 = (realt)lua_tonumber(L, 4);
  try {
    (arg1)->add_point(arg2,arg3,arg4);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_add_point(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Fityk_add_point__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Fityk_add_point__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Fityk_add_point'\n"
    "  Possible C/C++ prototypes are:\n"
    "    fityk::Fityk::add_point(realt,realt,realt,int)\n"
    "    fityk::Fityk::add_point(realt,realt,realt)\n");
  lua_error(L);return 0;
}


static int _wrap_Fityk_set_throws(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("fityk::Fityk::set_throws",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::set_throws",1,"fityk::Fityk *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("fityk::Fityk::set_throws",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_set_throws",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->set_throws(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_throws(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  bool result;
  
  SWIG_check_num_args("fityk::Fityk::get_throws",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_throws",1,"fityk::Fityk const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_throws",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  result = (bool)((fityk::Fityk const *)arg1)->get_throws();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_last_error(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("fityk::Fityk::last_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::last_error",1,"fityk::Fityk const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_last_error",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  result = (std::string *) &((fityk::Fityk const *)arg1)->last_error();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_clear_last_error(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  
  SWIG_check_num_args("fityk::Fityk::clear_last_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::clear_last_error",1,"fityk::Fityk *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_clear_last_error",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  (arg1)->clear_last_error();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_set_option_as_string(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("fityk::Fityk::set_option_as_string",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::set_option_as_string",1,"fityk::Fityk *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("fityk::Fityk::set_option_as_string",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("fityk::Fityk::set_option_as_string",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_set_option_as_string",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  try {
    (arg1)->set_option_as_string((std::string const &)*arg2,(std::string const &)*arg3);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_set_option_as_number(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  std::string temp2 ;
  
  SWIG_check_num_args("fityk::Fityk::set_option_as_number",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::set_option_as_number",1,"fityk::Fityk *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("fityk::Fityk::set_option_as_number",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("fityk::Fityk::set_option_as_number",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_set_option_as_number",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (double)lua_tonumber(L, 3);
  try {
    (arg1)->set_option_as_number((std::string const &)*arg2,arg3);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_option_as_string(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("fityk::Fityk::get_option_as_string",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_option_as_string",1,"fityk::Fityk const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("fityk::Fityk::get_option_as_string",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_option_as_string",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = ((fityk::Fityk const *)arg1)->get_option_as_string((std::string const &)*arg2);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_option_as_number(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  double result;
  
  SWIG_check_num_args("fityk::Fityk::get_option_as_number",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_option_as_number",1,"fityk::Fityk const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("fityk::Fityk::get_option_as_number",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_option_as_number",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = (double)((fityk::Fityk const *)arg1)->get_option_as_number((std::string const &)*arg2);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_redir_messages(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  std::FILE *arg2 = (std::FILE *) 0 ;
  
  SWIG_check_num_args("fityk::Fityk::redir_messages",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::redir_messages",1,"fityk::Fityk *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_redir_messages",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  {
    FILE **f;
    if (lua_isnil(L, 2))
    arg2=NULL;
    else {
      f = (FILE **)luaL_checkudata(L, 2, "FILE*");
      if (*f == NULL)
      luaL_error(L, "attempt to use a closed file");
      arg2=*f;
    }
  }
  (arg1)->redir_messages(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_out(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("fityk::Fityk::out",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::out",1,"fityk::Fityk const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("fityk::Fityk::out",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_out",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  ((fityk::Fityk const *)arg1)->out((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_input(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("fityk::Fityk::input",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::input",1,"fityk::Fityk *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("fityk::Fityk::input",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_input",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->input((std::string const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_info__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("fityk::Fityk::get_info",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_info",1,"fityk::Fityk *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("fityk::Fityk::get_info",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("fityk::Fityk::get_info",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_info",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (int)lua_tonumber(L, 3);
  try {
    result = (arg1)->get_info((std::string const &)*arg2,arg3);
  }
  catch(fityk::SyntaxError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_info__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("fityk::Fityk::get_info",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_info",1,"fityk::Fityk *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("fityk::Fityk::get_info",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_info",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = (arg1)->get_info((std::string const &)*arg2);
  }
  catch(fityk::SyntaxError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_info(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Fityk_get_info__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Fityk_get_info__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Fityk_get_info'\n"
    "  Possible C/C++ prototypes are:\n"
    "    fityk::Fityk::get_info(std::string const &,int)\n"
    "    fityk::Fityk::get_info(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Fityk_calculate_expr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string temp2 ;
  realt result;
  
  SWIG_check_num_args("fityk::Fityk::calculate_expr",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::calculate_expr",1,"fityk::Fityk *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("fityk::Fityk::calculate_expr",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("fityk::Fityk::calculate_expr",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_calculate_expr",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (int)lua_tonumber(L, 3);
  try {
    result = (realt)(arg1)->calculate_expr((std::string const &)*arg2,arg3);
  }
  catch(fityk::SyntaxError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_calculate_expr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  realt result;
  
  SWIG_check_num_args("fityk::Fityk::calculate_expr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::calculate_expr",1,"fityk::Fityk *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("fityk::Fityk::calculate_expr",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_calculate_expr",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = (realt)(arg1)->calculate_expr((std::string const &)*arg2);
  }
  catch(fityk::SyntaxError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_calculate_expr(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Fityk_calculate_expr__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Fityk_calculate_expr__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Fityk_calculate_expr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    fityk::Fityk::calculate_expr(std::string const &,int)\n"
    "    fityk::Fityk::calculate_expr(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Fityk_get_dataset_count(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  int result;
  
  SWIG_check_num_args("fityk::Fityk::get_dataset_count",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_dataset_count",1,"fityk::Fityk const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_dataset_count",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  result = (int)((fityk::Fityk const *)arg1)->get_dataset_count();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_default_dataset(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  int result;
  
  SWIG_check_num_args("fityk::Fityk::get_default_dataset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_default_dataset",1,"fityk::Fityk const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_default_dataset",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  result = (int)((fityk::Fityk const *)arg1)->get_default_dataset();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_data__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  int arg2 ;
  std::vector< fityk::Point > *result = 0 ;
  
  SWIG_check_num_args("fityk::Fityk::get_data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_data",1,"fityk::Fityk *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::Fityk::get_data",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_data",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  try {
    result = (std::vector< fityk::Point > *) &(arg1)->get_data(arg2);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_fityk__Point_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_data__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  std::vector< fityk::Point > *result = 0 ;
  
  SWIG_check_num_args("fityk::Fityk::get_data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_data",1,"fityk::Fityk *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_data",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  try {
    result = (std::vector< fityk::Point > *) &(arg1)->get_data();
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_fityk__Point_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_data(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Fityk_get_data__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Fityk_get_data__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Fityk_get_data'\n"
    "  Possible C/C++ prototypes are:\n"
    "    fityk::Fityk::get_data(int)\n"
    "    fityk::Fityk::get_data()\n");
  lua_error(L);return 0;
}


static int _wrap_Fityk_get_parameter_count(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  int result;
  
  SWIG_check_num_args("fityk::Fityk::get_parameter_count",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_parameter_count",1,"fityk::Fityk const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_parameter_count",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  result = (int)((fityk::Fityk const *)arg1)->get_parameter_count();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_all_parameters(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  std::vector< realt > *result = 0 ;
  
  SWIG_check_num_args("fityk::Fityk::all_parameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::all_parameters",1,"fityk::Fityk const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_all_parameters",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  result = (std::vector< realt > *) &((fityk::Fityk const *)arg1)->all_parameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_all_variables(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  std::vector< fityk::Var * > result;
  
  SWIG_check_num_args("fityk::Fityk::all_variables",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::all_variables",1,"fityk::Fityk const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_all_variables",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  result = ((fityk::Fityk const *)arg1)->all_variables();
  {
    std::vector< fityk::Var * > * resultptr = new std::vector< fityk::Var * >((const std::vector< fityk::Var * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_fityk__Var_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_variable(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  fityk::Var *result = 0 ;
  
  SWIG_check_num_args("fityk::Fityk::get_variable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_variable",1,"fityk::Fityk *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("fityk::Fityk::get_variable",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_variable",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = (fityk::Var *)(arg1)->get_variable((std::string const &)*arg2);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fityk__Var,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_all_functions(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  std::vector< fityk::Func * > result;
  
  SWIG_check_num_args("fityk::Fityk::all_functions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::all_functions",1,"fityk::Fityk const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_all_functions",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  result = ((fityk::Fityk const *)arg1)->all_functions();
  {
    std::vector< fityk::Func * > * resultptr = new std::vector< fityk::Func * >((const std::vector< fityk::Func * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_fityk__Func_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_function(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  fityk::Func *result = 0 ;
  
  SWIG_check_num_args("fityk::Fityk::get_function",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_function",1,"fityk::Fityk const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("fityk::Fityk::get_function",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_function",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (fityk::Func *)((fityk::Fityk const *)arg1)->get_function((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fityk__Func,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_components__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  int arg2 ;
  char arg3 ;
  std::vector< fityk::Func * > result;
  
  SWIG_check_num_args("fityk::Fityk::get_components",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_components",1,"fityk::Fityk *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::Fityk::get_components",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("fityk::Fityk::get_components",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_components",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  try {
    result = (arg1)->get_components(arg2,arg3);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  {
    std::vector< fityk::Func * > * resultptr = new std::vector< fityk::Func * >((const std::vector< fityk::Func * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_fityk__Func_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_components__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  int arg2 ;
  std::vector< fityk::Func * > result;
  
  SWIG_check_num_args("fityk::Fityk::get_components",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_components",1,"fityk::Fityk *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::Fityk::get_components",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_components",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  try {
    result = (arg1)->get_components(arg2);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  {
    std::vector< fityk::Func * > * resultptr = new std::vector< fityk::Func * >((const std::vector< fityk::Func * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_fityk__Func_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_components__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  std::vector< fityk::Func * > result;
  
  SWIG_check_num_args("fityk::Fityk::get_components",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_components",1,"fityk::Fityk *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_components",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  try {
    result = (arg1)->get_components();
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  {
    std::vector< fityk::Func * > * resultptr = new std::vector< fityk::Func * >((const std::vector< fityk::Func * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_fityk__Func_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_components(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Fityk_get_components__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Fityk_get_components__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_Fityk_get_components__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Fityk_get_components'\n"
    "  Possible C/C++ prototypes are:\n"
    "    fityk::Fityk::get_components(int,char)\n"
    "    fityk::Fityk::get_components(int)\n"
    "    fityk::Fityk::get_components()\n");
  lua_error(L);return 0;
}


static int _wrap_Fityk_get_model_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  realt arg2 ;
  int arg3 ;
  realt result;
  
  SWIG_check_num_args("fityk::Fityk::get_model_value",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_model_value",1,"fityk::Fityk *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::Fityk::get_model_value",2,"realt");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("fityk::Fityk::get_model_value",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_model_value",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  arg2 = (realt)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  try {
    result = (realt)(arg1)->get_model_value(arg2,arg3);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_model_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  realt arg2 ;
  realt result;
  
  SWIG_check_num_args("fityk::Fityk::get_model_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_model_value",1,"fityk::Fityk *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::Fityk::get_model_value",2,"realt");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_model_value",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  arg2 = (realt)lua_tonumber(L, 2);
  try {
    result = (realt)(arg1)->get_model_value(arg2);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_model_value(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Fityk_get_model_value__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Fityk_get_model_value__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Fityk_get_model_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    fityk::Fityk::get_model_value(realt,int)\n"
    "    fityk::Fityk::get_model_value(realt)\n");
  lua_error(L);return 0;
}


static int _wrap_Fityk_get_model_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  std::vector< realt > *arg2 = 0 ;
  int arg3 ;
  std::vector< realt > result;
  
  SWIG_check_num_args("fityk::Fityk::get_model_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_model_vector",1,"fityk::Fityk *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("fityk::Fityk::get_model_vector",2,"std::vector< realt > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("fityk::Fityk::get_model_vector",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_model_vector",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("Fityk_get_model_vector",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  try {
    result = (arg1)->get_model_vector((std::vector< realt > const &)*arg2,arg3);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  {
    std::vector< realt > * resultptr = new std::vector< realt >((const std::vector< realt > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_model_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  std::vector< realt > *arg2 = 0 ;
  std::vector< realt > result;
  
  SWIG_check_num_args("fityk::Fityk::get_model_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_model_vector",1,"fityk::Fityk *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("fityk::Fityk::get_model_vector",2,"std::vector< realt > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_model_vector",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("Fityk_get_model_vector",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  try {
    result = (arg1)->get_model_vector((std::vector< realt > const &)*arg2);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  {
    std::vector< realt > * resultptr = new std::vector< realt >((const std::vector< realt > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_model_vector(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Fityk_get_model_vector__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Fityk_get_model_vector__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Fityk_get_model_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    fityk::Fityk::get_model_vector(std::vector< realt > const &,int)\n"
    "    fityk::Fityk::get_model_vector(std::vector< realt > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Fityk_get_view_boundary(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  char arg2 ;
  double result;
  
  SWIG_check_num_args("fityk::Fityk::get_view_boundary",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_view_boundary",1,"fityk::Fityk *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("fityk::Fityk::get_view_boundary",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_view_boundary",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (double)(arg1)->get_view_boundary(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_wssr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  int arg2 ;
  realt result;
  
  SWIG_check_num_args("fityk::Fityk::get_wssr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_wssr",1,"fityk::Fityk *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::Fityk::get_wssr",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_wssr",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  try {
    result = (realt)(arg1)->get_wssr(arg2);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_wssr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  realt result;
  
  SWIG_check_num_args("fityk::Fityk::get_wssr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_wssr",1,"fityk::Fityk *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_wssr",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  try {
    result = (realt)(arg1)->get_wssr();
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_wssr(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Fityk_get_wssr__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Fityk_get_wssr__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Fityk_get_wssr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    fityk::Fityk::get_wssr(int)\n"
    "    fityk::Fityk::get_wssr()\n");
  lua_error(L);return 0;
}


static int _wrap_Fityk_get_ssr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  int arg2 ;
  realt result;
  
  SWIG_check_num_args("fityk::Fityk::get_ssr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_ssr",1,"fityk::Fityk *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::Fityk::get_ssr",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_ssr",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  try {
    result = (realt)(arg1)->get_ssr(arg2);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_ssr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  realt result;
  
  SWIG_check_num_args("fityk::Fityk::get_ssr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_ssr",1,"fityk::Fityk *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_ssr",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  try {
    result = (realt)(arg1)->get_ssr();
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_ssr(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Fityk_get_ssr__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Fityk_get_ssr__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Fityk_get_ssr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    fityk::Fityk::get_ssr(int)\n"
    "    fityk::Fityk::get_ssr()\n");
  lua_error(L);return 0;
}


static int _wrap_Fityk_get_rsquared__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  int arg2 ;
  realt result;
  
  SWIG_check_num_args("fityk::Fityk::get_rsquared",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_rsquared",1,"fityk::Fityk *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::Fityk::get_rsquared",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_rsquared",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  try {
    result = (realt)(arg1)->get_rsquared(arg2);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_rsquared__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  realt result;
  
  SWIG_check_num_args("fityk::Fityk::get_rsquared",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_rsquared",1,"fityk::Fityk *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_rsquared",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  try {
    result = (realt)(arg1)->get_rsquared();
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_rsquared(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Fityk_get_rsquared__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Fityk_get_rsquared__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Fityk_get_rsquared'\n"
    "  Possible C/C++ prototypes are:\n"
    "    fityk::Fityk::get_rsquared(int)\n"
    "    fityk::Fityk::get_rsquared()\n");
  lua_error(L);return 0;
}


static int _wrap_Fityk_get_dof__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("fityk::Fityk::get_dof",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_dof",1,"fityk::Fityk *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::Fityk::get_dof",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_dof",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  try {
    result = (int)(arg1)->get_dof(arg2);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_dof__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  int result;
  
  SWIG_check_num_args("fityk::Fityk::get_dof",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_dof",1,"fityk::Fityk *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_dof",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  try {
    result = (int)(arg1)->get_dof();
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_dof(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Fityk_get_dof__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Fityk_get_dof__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Fityk_get_dof'\n"
    "  Possible C/C++ prototypes are:\n"
    "    fityk::Fityk::get_dof(int)\n"
    "    fityk::Fityk::get_dof()\n");
  lua_error(L);return 0;
}


static int _wrap_Fityk_get_covariance_matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::vector< std::vector< double > > > result;
  
  SWIG_check_num_args("fityk::Fityk::get_covariance_matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_covariance_matrix",1,"fityk::Fityk *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fityk::Fityk::get_covariance_matrix",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_covariance_matrix",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  try {
    result = (arg1)->get_covariance_matrix(arg2);
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  {
    std::vector< std::vector< realt > > * resultptr = new std::vector< std::vector< realt > >((const std::vector< std::vector< realt > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_covariance_matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  SwigValueWrapper< std::vector< std::vector< double > > > result;
  
  SWIG_check_num_args("fityk::Fityk::get_covariance_matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::get_covariance_matrix",1,"fityk::Fityk *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_get_covariance_matrix",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  try {
    result = (arg1)->get_covariance_matrix();
  }
  catch(fityk::ExecuteError &_e) {
    {
      lua_pushstring(L,(&_e)->what()); SWIG_fail;
    }
  }
  
  {
    std::vector< std::vector< realt > > * resultptr = new std::vector< std::vector< realt > >((const std::vector< std::vector< realt > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_get_covariance_matrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Fityk_get_covariance_matrix__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_fityk__Fityk, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Fityk_get_covariance_matrix__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Fityk_get_covariance_matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    fityk::Fityk::get_covariance_matrix(int)\n"
    "    fityk::Fityk::get_covariance_matrix()\n");
  lua_error(L);return 0;
}


static int _wrap_Fityk_process_cmd_line_arg(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("fityk::Fityk::process_cmd_line_arg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::process_cmd_line_arg",1,"fityk::Fityk *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("fityk::Fityk::process_cmd_line_arg",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_process_cmd_line_arg",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->process_cmd_line_arg((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fityk_priv(lua_State* L) {
  int SWIG_arg = 0;
  fityk::Fityk *arg1 = (fityk::Fityk *) 0 ;
  fityk::Full *result = 0 ;
  
  SWIG_check_num_args("fityk::Fityk::priv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fityk::Fityk::priv",1,"fityk::Fityk *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fityk__Fityk,0))){
    SWIG_fail_ptr("Fityk_priv",1,SWIGTYPE_p_fityk__Fityk);
  }
  
  result = (fityk::Full *)(arg1)->priv();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fityk__Full,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Fityk(void *obj) {
fityk::Fityk *arg1 = (fityk::Fityk *) obj;
delete arg1;
}
static int _proxy__wrap_new_Fityk(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Fityk);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Fityk_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Fityk_methods[]= {
    { "execute", _wrap_Fityk_execute},
    { "load", _wrap_Fityk_load},
    { "load_data", _wrap_Fityk_load_data},
    { "add_point", _wrap_Fityk_add_point},
    { "set_throws", _wrap_Fityk_set_throws},
    { "get_throws", _wrap_Fityk_get_throws},
    { "last_error", _wrap_Fityk_last_error},
    { "clear_last_error", _wrap_Fityk_clear_last_error},
    { "set_option_as_string", _wrap_Fityk_set_option_as_string},
    { "set_option_as_number", _wrap_Fityk_set_option_as_number},
    { "get_option_as_string", _wrap_Fityk_get_option_as_string},
    { "get_option_as_number", _wrap_Fityk_get_option_as_number},
    { "redir_messages", _wrap_Fityk_redir_messages},
    { "out", _wrap_Fityk_out},
    { "input", _wrap_Fityk_input},
    { "get_info", _wrap_Fityk_get_info},
    { "calculate_expr", _wrap_Fityk_calculate_expr},
    { "get_dataset_count", _wrap_Fityk_get_dataset_count},
    { "get_default_dataset", _wrap_Fityk_get_default_dataset},
    { "get_data", _wrap_Fityk_get_data},
    { "get_parameter_count", _wrap_Fityk_get_parameter_count},
    { "all_parameters", _wrap_Fityk_all_parameters},
    { "all_variables", _wrap_Fityk_all_variables},
    { "get_variable", _wrap_Fityk_get_variable},
    { "all_functions", _wrap_Fityk_all_functions},
    { "get_function", _wrap_Fityk_get_function},
    { "get_components", _wrap_Fityk_get_components},
    { "get_model_value", _wrap_Fityk_get_model_value},
    { "get_model_vector", _wrap_Fityk_get_model_vector},
    { "get_view_boundary", _wrap_Fityk_get_view_boundary},
    { "get_wssr", _wrap_Fityk_get_wssr},
    { "get_ssr", _wrap_Fityk_get_ssr},
    { "get_rsquared", _wrap_Fityk_get_rsquared},
    { "get_dof", _wrap_Fityk_get_dof},
    { "get_covariance_matrix", _wrap_Fityk_get_covariance_matrix},
    { "process_cmd_line_arg", _wrap_Fityk_process_cmd_line_arg},
    { "priv", _wrap_Fityk_priv},
    {0,0}
};
static swig_lua_method swig_Fityk_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Fityk_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Fityk_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Fityk_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Fityk_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Fityk_Sf_SwigStatic = {
    "Fityk",
    swig_Fityk_Sf_SwigStatic_methods,
    swig_Fityk_Sf_SwigStatic_attributes,
    swig_Fityk_Sf_SwigStatic_constants,
    swig_Fityk_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Fityk_bases[] = {0};
static const char *swig_Fityk_base_names[] = {0};
static swig_lua_class _wrap_class_Fityk = { "Fityk", "Fityk", &SWIGTYPE_p_fityk__Fityk,_proxy__wrap_new_Fityk, swig_delete_Fityk, swig_Fityk_methods, swig_Fityk_attributes, &swig_Fityk_Sf_SwigStatic, swig_Fityk_meta, swig_Fityk_bases, swig_Fityk_base_names };

static swig_lua_attribute swig_SwigModule_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("USE_LONG_DOUBLE", 0)},
    {SWIG_LUA_CONSTTAB_STRING("REALT_LENGTH_MOD", "")},
    {SWIG_LUA_CONSTTAB_INT("ALL_DATASETS", fityk::ALL_DATASETS)},
    {SWIG_LUA_CONSTTAB_INT("DEFAULT_DATASET", fityk::DEFAULT_DATASET)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_string,
&_wrap_class_PointVector,
&_wrap_class_RealVector,
&_wrap_class_VarVector,
&_wrap_class_FuncVector,
&_wrap_class_runtime_error,
&_wrap_class_invalid_argument,
&_wrap_class_ExecuteError,
&_wrap_class_SyntaxError,
&_wrap_class_ExitRequestedException,
&_wrap_class_RealRange,
&_wrap_class_Var,
&_wrap_class_Func,
&_wrap_class_Point,
&_wrap_class_Fityk,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "fityk",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_fityk__SyntaxErrorTo_p_std__invalid_argument(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::invalid_argument *)  ((fityk::SyntaxError *) x));
}
static void *_p_std__runtime_errorTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *)  ((std::runtime_error *) x));
}
static void *_p_fityk__ExitRequestedExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *)  ((fityk::ExitRequestedException *) x));
}
static void *_p_fityk__ExecuteErrorTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (std::runtime_error *) ((fityk::ExecuteError *) x));
}
static void *_p_std__invalid_argumentTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *)  ((std::invalid_argument *) x));
}
static void *_p_fityk__SyntaxErrorTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (std::invalid_argument *) ((fityk::SyntaxError *) x));
}
static void *_p_fityk__ExecuteErrorTo_p_std__runtime_error(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::runtime_error *)  ((fityk::ExecuteError *) x));
}
static swig_type_info _swigt__fityk__ExitRequestedException = {"_fityk__ExitRequestedException", "fityk::ExitRequestedException", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *|realt *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fityk__ExecuteError = {"_p_fityk__ExecuteError", "fityk::ExecuteError *", 0, 0, (void*)&_wrap_class_ExecuteError, 0};
static swig_type_info _swigt__p_fityk__ExitRequestedException = {"_p_fityk__ExitRequestedException", "fityk::ExitRequestedException *", 0, 0, (void*)&_wrap_class_ExitRequestedException, 0};
static swig_type_info _swigt__p_fityk__Fityk = {"_p_fityk__Fityk", "fityk::Fityk *", 0, 0, (void*)&_wrap_class_Fityk, 0};
static swig_type_info _swigt__p_fityk__Full = {"_p_fityk__Full", "fityk::Full *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fityk__Func = {"_p_fityk__Func", "fityk::Func *", 0, 0, (void*)&_wrap_class_Func, 0};
static swig_type_info _swigt__p_fityk__Point = {"_p_fityk__Point", "fityk::Point *", 0, 0, (void*)&_wrap_class_Point, 0};
static swig_type_info _swigt__p_fityk__RealRange = {"_p_fityk__RealRange", "fityk::RealRange *", 0, 0, (void*)&_wrap_class_RealRange, 0};
static swig_type_info _swigt__p_fityk__SyntaxError = {"_p_fityk__SyntaxError", "fityk::SyntaxError *", 0, 0, (void*)&_wrap_class_SyntaxError, 0};
static swig_type_info _swigt__p_fityk__Var = {"_p_fityk__Var", "fityk::Var *", 0, 0, (void*)&_wrap_class_Var, 0};
static swig_type_info _swigt__p_std__FILE = {"_p_std__FILE", "std::FILE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__exception = {"_p_std__exception", "std::exception *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)&_wrap_class_invalid_argument, 0};
static swig_type_info _swigt__p_std__runtime_error = {"_p_std__runtime_error", "std::runtime_error *", 0, 0, (void*)&_wrap_class_runtime_error, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)&_wrap_class_string, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< realt > *|std::vector< double > *", 0, 0, (void*)&_wrap_class_RealVector, 0};
static swig_type_info _swigt__p_std__vectorT_fityk__Func_p_t = {"_p_std__vectorT_fityk__Func_p_t", "std::vector< fityk::Func * > *", 0, 0, (void*)&_wrap_class_FuncVector, 0};
static swig_type_info _swigt__p_std__vectorT_fityk__Point_t = {"_p_std__vectorT_fityk__Point_t", "std::vector< fityk::Point > *", 0, 0, (void*)&_wrap_class_PointVector, 0};
static swig_type_info _swigt__p_std__vectorT_fityk__Var_p_t = {"_p_std__vectorT_fityk__Var_p_t", "std::vector< fityk::Var * > *", 0, 0, (void*)&_wrap_class_VarVector, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_double_t_t = {"_p_std__vectorT_std__vectorT_double_t_t", "std::vector< std::vector< double > > *|std::vector< std::vector< realt > > *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__fityk__ExitRequestedException,
  &_swigt__p_double,
  &_swigt__p_fityk__ExecuteError,
  &_swigt__p_fityk__ExitRequestedException,
  &_swigt__p_fityk__Fityk,
  &_swigt__p_fityk__Full,
  &_swigt__p_fityk__Func,
  &_swigt__p_fityk__Point,
  &_swigt__p_fityk__RealRange,
  &_swigt__p_fityk__SyntaxError,
  &_swigt__p_fityk__Var,
  &_swigt__p_std__FILE,
  &_swigt__p_std__exception,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__runtime_error,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_fityk__Func_p_t,
  &_swigt__p_std__vectorT_fityk__Point_t,
  &_swigt__p_std__vectorT_fityk__Var_p_t,
  &_swigt__p_std__vectorT_std__vectorT_double_t_t,
};

static swig_cast_info _swigc__fityk__ExitRequestedException[] = {  {&_swigt__fityk__ExitRequestedException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fityk__ExecuteError[] = {  {&_swigt__p_fityk__ExecuteError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fityk__ExitRequestedException[] = {  {&_swigt__p_fityk__ExitRequestedException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fityk__Fityk[] = {  {&_swigt__p_fityk__Fityk, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fityk__Full[] = {  {&_swigt__p_fityk__Full, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fityk__Func[] = {  {&_swigt__p_fityk__Func, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fityk__Point[] = {  {&_swigt__p_fityk__Point, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fityk__RealRange[] = {  {&_swigt__p_fityk__RealRange, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fityk__SyntaxError[] = {  {&_swigt__p_fityk__SyntaxError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fityk__Var[] = {  {&_swigt__p_fityk__Var, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__FILE[] = {  {&_swigt__p_std__FILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__exception[] = {  {&_swigt__p_std__runtime_error, _p_std__runtime_errorTo_p_std__exception, 0, 0},  {&_swigt__p_std__exception, 0, 0, 0},  {&_swigt__p_fityk__ExitRequestedException, _p_fityk__ExitRequestedExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_fityk__ExecuteError, _p_fityk__ExecuteErrorTo_p_std__exception, 0, 0},  {&_swigt__p_std__invalid_argument, _p_std__invalid_argumentTo_p_std__exception, 0, 0},  {&_swigt__p_fityk__SyntaxError, _p_fityk__SyntaxErrorTo_p_std__exception, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},  {&_swigt__p_fityk__SyntaxError, _p_fityk__SyntaxErrorTo_p_std__invalid_argument, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__runtime_error[] = {  {&_swigt__p_std__runtime_error, 0, 0, 0},  {&_swigt__p_fityk__ExecuteError, _p_fityk__ExecuteErrorTo_p_std__runtime_error, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_fityk__Func_p_t[] = {  {&_swigt__p_std__vectorT_fityk__Func_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_fityk__Point_t[] = {  {&_swigt__p_std__vectorT_fityk__Point_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_fityk__Var_p_t[] = {  {&_swigt__p_std__vectorT_fityk__Var_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_double_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__fityk__ExitRequestedException,
  _swigc__p_double,
  _swigc__p_fityk__ExecuteError,
  _swigc__p_fityk__ExitRequestedException,
  _swigc__p_fityk__Fityk,
  _swigc__p_fityk__Full,
  _swigc__p_fityk__Func,
  _swigc__p_fityk__Point,
  _swigc__p_fityk__RealRange,
  _swigc__p_fityk__SyntaxError,
  _swigc__p_fityk__Var,
  _swigc__p_std__FILE,
  _swigc__p_std__exception,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__runtime_error,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_fityk__Func_p_t,
  _swigc__p_std__vectorT_fityk__Point_t,
  _swigc__p_std__vectorT_fityk__Var_p_t,
  _swigc__p_std__vectorT_std__vectorT_double_t_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

